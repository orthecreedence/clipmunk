(in-package :clipmunk.ffi)

(defmacro def-ffi (fn-name)
  (multiple-value-bind (fn-meta existsp) (gethash fn-name clipmunk::*function-registry*)
    (when (and fn-meta existsp)
      (let ((args (loop for arg in (getf fn-meta :args)
                        collect (list (clipmunk::convert-sym (car arg))
                                      (cadr arg))))
            (varname (clipmunk::chipmunk-lispify fn-name 'variable))
            (fn-def (clipmunk::chipmunk-lispify fn-name 'function)))
        `(progn
           (defparameter ,varname
                         (cffi:mem-aref (cffi:foreign-symbol-pointer ,(format nil "_~a" fn-name)) :pointer))
           (defun ,fn-def ,(loop for arg in args collect (car arg))
             (cffi:foreign-funcall-pointer ,varname () ,@(loop for arg in args append (list (cadr arg) (car arg))) ,(getf fn-meta :return)))
           (export ,(read-from-string (format nil "'~s" fn-def)) :clipmunk.ffi))))))

(eval-when (:compile-toplevel :load-toplevel)
  (defun get-class-slot-type (class slot)
    (multiple-value-bind (slots existsp) (gethash class clipmunk::*class-registry*)
      (if existsp
          (let* ((slot-sym (clipmunk::convert-sym slot))
                 (slot (find-if (lambda (slot)
                                  (eq (car slot) slot-sym)) slots))
                 (type (cadr slot)))
            (if type
                type
                :void))
          :void))))

(defmacro def-ffi-prop (obj prop)
  (let* ((fn-get-str (format nil "~aGet~a" obj prop))
         (fn-set-str (format nil "~aSet~a" obj prop))
         (varname-get (clipmunk::chipmunk-lispify fn-get-str 'variable))
         (varname-set (clipmunk::chipmunk-lispify fn-set-str 'variable))
         (obj-class (clipmunk::chipmunk-lispify obj 'classname))
         (prop-name (clipmunk::chipmunk-lispify prop 'slotname))
         (fn-get-name (clipmunk::chipmunk-lispify fn-get-str 'function))
         (fn-set-name (clipmunk::chipmunk-lispify fn-set-str 'function)))
    `(progn
       (defparameter ,varname-get
                     (cffi:mem-aref (cffi:foreign-symbol-pointer ,(format nil "_~a" fn-get-str)) :pointer))
       (defparameter ,varname-set
                     (cffi:mem-aref (cffi:foreign-symbol-pointer ,(format nil "_~a" fn-set-str)) :pointer))
       (defun ,fn-get-name ,(list obj-class)
         (cffi:foreign-funcall-pointer ,varname-get () :pointer ,obj-class ,(clipmunk.ffi::get-class-slot-type obj-class prop-name)))
       (defun ,fn-set-name ,(list obj-class)
         (cffi:foreign-funcall-pointer ,varname-set () :pointer ,obj-class ,(clipmunk.ffi::get-class-slot-type obj-class prop-name)))
       (export ,(read-from-string (format nil "'~s" fn-get-name)) :clipmunk.ffi)
       (export ,(read-from-string (format nil "'~s" fn-set-name)) :clipmunk.ffi))))

;; need to add this manually since it's not in bindings.lisp (no public fn)
(defparameter *body-is-sleeping* (cffi:mem-aref (cffi:foreign-symbol-pointer "_cpBodyIsSleeping") :pointer))
(defun body-is-sleeping (body)
  (cffi:foreign-funcall-pointer *body-is-sleeping* () :pointer body :int))
(export 'body-is-sleeping :clipmunk.ffi)

(def-ffi "cpv")
(def-ffi "cpveql")
(def-ffi "cpvadd")
(def-ffi "cpvneg")
(def-ffi "cpvsub")
(def-ffi "cpvmult")
(def-ffi "cpvdot")
(def-ffi "cpvcross")
(def-ffi "cpvperp")
(def-ffi "cpvrperp")
(def-ffi "cpvproject")
(def-ffi "cpvrotate")
(def-ffi "cpvunrotate")
(def-ffi "cpvlengthsq")
(def-ffi "cpvlerp")
(def-ffi "cpvnormalize")
(def-ffi "cpvnormalize_safe")
(def-ffi "cpvclamp")
(def-ffi "cpvlerpconst")
(def-ffi "cpvdist")
(def-ffi "cpvdistsq")
(def-ffi "cpvnear")
(def-ffi "cpfmax")
(def-ffi "cpfmin")
(def-ffi "cpfabs")
(def-ffi "cpfclamp")
(def-ffi "cpflerp")
(def-ffi "cpflerpconst")
(def-ffi "cpBBNew")
(def-ffi "cpBBNewForCircle")
(def-ffi "cpBBIntersects")
(def-ffi "cpBBContainsBB")
(def-ffi "cpBBContainsVect")
(def-ffi "cpBBMerge")
(def-ffi "cpBBExpand")
(def-ffi "cpBBArea")
(def-ffi "cpBBMergedArea")
(def-ffi "cpBBSegmentQuery")
(def-ffi "cpBBIntersectsSegment")
(def-ffi "cpBodyGetMass")
(def-ffi "cpBodyGetMoment")
(def-ffi "cpBodyGetPos")
(def-ffi "cpBodyGetAngle")
(def-ffi "cpBodyGetRot")
(def-ffi "cpBodyIsSleeping")
(def-ffi "cpBodyIsStatic")
(def-ffi "cpBodyIsRogue")
(def-ffi "cpBodyLocal2World")
(def-ffi "cpBodyWorld2Local")
(def-ffi "cpBodyKineticEnergy")
(def-ffi "cpShapeGetBB")
(def-ffi "cpArbiterGetShapes")
(def-ffi "cpArbiterGetBodies")
(def-ffi "cpArbiterIsFirstContact")
(def-ffi "cpArbiterGetCount")
(def-ffi "cpConstraintGetA")
(def-ffi "cpConstraintGetB")
(def-ffi "cpConstraintGetImpulse")
(def-ffi "cpGearJointGetRatio")
(def-ffi "cpGrooveJointGetGrooveA")
(def-ffi "cpGrooveJointGetGrooveB")
(def-ffi "cpSegmentQueryHitPoint")
(def-ffi "cpSegmentQueryHitDist")
(def-ffi "cpSpatialIndexDestroy")
(def-ffi "cpSpatialIndexCount")
(def-ffi "cpSpatialIndexEach")
(def-ffi "cpSpatialIndexContains")
(def-ffi "cpSpatialIndexInsert")
(def-ffi "cpSpatialIndexRemove")
(def-ffi "cpSpatialIndexReindex")
(def-ffi "cpSpatialIndexReindexObject")
(def-ffi "cpSpatialIndexSegmentQuery")
(def-ffi "cpSpatialIndexQuery")
(def-ffi "cpSpatialIndexReindexQuery")
(def-ffi "cpSpaceGetStaticBody")
(def-ffi "cpSpaceGetCurrentTimeStep")
(def-ffi "cpSpaceIsLocked")
(def-ffi-prop "cpBody" "Vel")
(def-ffi-prop "cpBody" "Force")
(def-ffi-prop "cpBody" "AngVel")
(def-ffi-prop "cpBody" "Torque")
(def-ffi-prop "cpBody" "VelLimit")
(def-ffi-prop "cpBody" "AngVelLimit")
(def-ffi-prop "cpBody" "UserData")
(def-ffi-prop "cpShape" "Body")
(def-ffi-prop "cpShape" "Sensor")
(def-ffi-prop "cpShape" "Elasticity")
(def-ffi-prop "cpShape" "Friction")
(def-ffi-prop "cpShape" "SurfaceVelocity")
(def-ffi-prop "cpShape" "UserData")
(def-ffi-prop "cpShape" "CollisionType")
(def-ffi-prop "cpShape" "Group")
(def-ffi-prop "cpShape" "Layers")
(def-ffi-prop "cpConstraint" "MaxForce")
(def-ffi-prop "cpConstraint" "ErrorBias")
(def-ffi-prop "cpConstraint" "MaxBias")
(def-ffi-prop "cpConstraint" "UserData")
(def-ffi-prop "cpDampedRotarySpring" "RestAngle")
(def-ffi-prop "cpDampedRotarySpring" "Stiffness")
(def-ffi-prop "cpDampedRotarySpring" "Damping")
(def-ffi-prop "cpDampedSpring" "Anchr1")
(def-ffi-prop "cpDampedSpring" "Anchr2")
(def-ffi-prop "cpDampedSpring" "RestLength")
(def-ffi-prop "cpDampedSpring" "Stiffness")
(def-ffi-prop "cpDampedSpring" "Damping")
(def-ffi-prop "cpGearJoint" "Phase")
(def-ffi-prop "cpGrooveJoint" "Anchr2")
(def-ffi-prop "cpPinJoint" "Anchr1")
(def-ffi-prop "cpPinJoint" "Anchr2")
(def-ffi-prop "cpPinJoint" "Dist")
(def-ffi-prop "cpPivotJoint" "Anchr1")
(def-ffi-prop "cpPivotJoint" "Anchr2")
(def-ffi-prop "cpRatchetJoint" "Angle")
(def-ffi-prop "cpRatchetJoint" "Phase")
(def-ffi-prop "cpRatchetJoint" "Ratchet")
(def-ffi-prop "cpRotaryLimitJoint" "Min")
(def-ffi-prop "cpRotaryLimitJoint" "Max")
(def-ffi-prop "cpSimpleMotor" "Rate")
(def-ffi-prop "cpSlideJoint" "Anchr1")
(def-ffi-prop "cpSlideJoint" "Anchr2")
(def-ffi-prop "cpSlideJoint" "Min")
(def-ffi-prop "cpSlideJoint" "Max")
(def-ffi-prop "cpSpace" "Iterations")
(def-ffi-prop "cpSpace" "Gravity")
(def-ffi-prop "cpSpace" "Damping")
(def-ffi-prop "cpSpace" "IdleSpeedThreshold")
(def-ffi-prop "cpSpace" "SleepTimeThreshold")
(def-ffi-prop "cpSpace" "CollisionSlop")
(def-ffi-prop "cpSpace" "CollisionBias")
(def-ffi-prop "cpSpace" "CollisionPersistence")
(def-ffi-prop "cpSpace" "EnableContactGraph")
(def-ffi-prop "cpSpace" "UserData")
