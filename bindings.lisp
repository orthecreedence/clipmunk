;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.8
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

(in-package :clipmunk)

(defparameter *function-registry* (make-hash-table :test #'equal))
(defparameter *class-registry* (make-hash-table :test #'equal))

(cl:defmacro clipmunk-defcfun (names return-type &rest args)
  `(progn
     (setf (gethash ,(car names) *function-registry*) (list :return ',return-type
                                                            :args ',(loop for arg in args
                                                                          if (listp arg) collect (list (car arg) (cadr arg)))))
     (cffi:defcfun ,names ,return-type ,@args)))

(cl:defmacro clipmunk-defcstruct (name &rest slots)
  `(progn
     (setf (gethash (clipmunk::convert-sym ',name) *class-registry*) ',(loop for slot in slots if (listp slot) collect (list (car slot) (cadr slot))))
     (cffi:defcstruct ,name ,@slots)))



(cl:defconstant #.(chipmunk-lispify "CP_ALLOW_PRIVATE_ACCESS" 'constant) 1)

(clipmunk-defcstruct #.(chipmunk-lispify "cpArray" 'classname)
	(#.(chipmunk-lispify "num" 'slotname) :int)
	(#.(chipmunk-lispify "max" 'slotname) :int)
	(#.(chipmunk-lispify "arr" 'slotname) :pointer))

(clipmunk-defcfun ("cpArrayNew" #.(chipmunk-lispify "cpArrayNew" 'function)) :pointer
  (size :int))

(clipmunk-defcfun ("cpArrayFree" #.(chipmunk-lispify "cpArrayFree" 'function)) :void
  (arr :pointer))

(clipmunk-defcfun ("cpArrayPush" #.(chipmunk-lispify "cpArrayPush" 'function)) :void
  (arr :pointer)
  (object :pointer))

(clipmunk-defcfun ("cpArrayPop" #.(chipmunk-lispify "cpArrayPop" 'function)) :pointer
  (arr :pointer))

(clipmunk-defcfun ("cpArrayDeleteObj" #.(chipmunk-lispify "cpArrayDeleteObj" 'function)) :void
  (arr :pointer)
  (obj :pointer))

(clipmunk-defcfun ("cpArrayContains" #.(chipmunk-lispify "cpArrayContains" 'function)) :int
  (arr :pointer)
  (ptr :pointer))

(clipmunk-defcfun ("cpArrayFreeEach" #.(chipmunk-lispify "cpArrayFreeEach" 'function)) :void
  (arr :pointer)
  (arg1 :pointer))

(clipmunk-defcfun ("cpConstraintNext" #.(chipmunk-lispify "cpConstraintNext" 'function)) :pointer
  (node :pointer)
  (body :pointer))

(clipmunk-defcfun ("cpArbiterNext" #.(chipmunk-lispify "cpArbiterNext" 'function)) :pointer
  (node :pointer)
  (body :pointer))

(clipmunk-defcfun ("cpHashSetNew" #.(chipmunk-lispify "cpHashSetNew" 'function)) :pointer
  (size :int)
  (eqlFunc :pointer))

(clipmunk-defcfun ("cpHashSetSetDefaultValue" #.(chipmunk-lispify "cpHashSetSetDefaultValue" 'function)) :void
  (set :pointer)
  (default_value :pointer))

(clipmunk-defcfun ("cpHashSetFree" #.(chipmunk-lispify "cpHashSetFree" 'function)) :void
  (set :pointer))

(clipmunk-defcfun ("cpHashSetCount" #.(chipmunk-lispify "cpHashSetCount" 'function)) :int
  (set :pointer))

(clipmunk-defcfun ("cpHashSetInsert" #.(chipmunk-lispify "cpHashSetInsert" 'function)) :pointer
  (set :pointer)
  (hash :pointer)
  (ptr :pointer)
  (data :pointer)
  (trans :pointer))

(clipmunk-defcfun ("cpHashSetRemove" #.(chipmunk-lispify "cpHashSetRemove" 'function)) :pointer
  (set :pointer)
  (hash :pointer)
  (ptr :pointer))

(clipmunk-defcfun ("cpHashSetFind" #.(chipmunk-lispify "cpHashSetFind" 'function)) :pointer
  (set :pointer)
  (hash :pointer)
  (ptr :pointer))

(clipmunk-defcfun ("cpHashSetEach" #.(chipmunk-lispify "cpHashSetEach" 'function)) :void
  (set :pointer)
  (func :pointer)
  (data :pointer))

(clipmunk-defcfun ("cpHashSetFilter" #.(chipmunk-lispify "cpHashSetFilter" 'function)) :void
  (set :pointer)
  (func :pointer)
  (data :pointer))

(clipmunk-defcfun ("cpBodyAddShape" #.(chipmunk-lispify "cpBodyAddShape" 'function)) :void
  (body :pointer)
  (shape :pointer))

(clipmunk-defcfun ("cpBodyRemoveShape" #.(chipmunk-lispify "cpBodyRemoveShape" 'function)) :void
  (body :pointer)
  (shape :pointer))

(clipmunk-defcfun ("cpBodyRemoveConstraint" #.(chipmunk-lispify "cpBodyRemoveConstraint" 'function)) :void
  (body :pointer)
  (constraint :pointer))

(clipmunk-defcfun ("cpClosetPointOnSegment" #.(chipmunk-lispify "cpClosetPointOnSegment" 'function)) :pointer
  (p :pointer)
  (a :pointer)
  (b :pointer))

(clipmunk-defcfun ("cpShapeInit" #.(chipmunk-lispify "cpShapeInit" 'function)) :pointer
  (shape :pointer)
  (klass :pointer)
  (body :pointer))

(clipmunk-defcfun ("cpShapeActive" #.(chipmunk-lispify "cpShapeActive" 'function)) :int
  (shape :pointer))

(clipmunk-defcfun ("cpCollideShapes" #.(chipmunk-lispify "cpCollideShapes" 'function)) :int
  (a :pointer)
  (b :pointer)
  (arr :pointer))

(clipmunk-defcfun ("cpSplittingPlaneNew" #.(chipmunk-lispify "cpSplittingPlaneNew" 'function)) :pointer
  (a :pointer)
  (b :pointer))

(clipmunk-defcfun ("cpSplittingPlaneCompare" #.(chipmunk-lispify "cpSplittingPlaneCompare" 'function)) :double
  (plane :pointer)
  (v :pointer))

(clipmunk-defcfun ("cpLoopIndexes" #.(chipmunk-lispify "cpLoopIndexes" 'function)) :void
  (verts :pointer)
  (count :int)
  (start :pointer)
  (end :pointer))

(clipmunk-defcfun ("cpSpatialIndexInit" #.(chipmunk-lispify "cpSpatialIndexInit" 'function)) :pointer
  (index :pointer)
  (klass :pointer)
  (bbfunc :pointer)
  (staticIndex :pointer))

(cffi:defcvar ("cpDefaultCollisionHandler" #.(chipmunk-lispify "cpDefaultCollisionHandler" 'variable))
 :pointer)

(clipmunk-defcfun ("cpSpaceProcessComponents" #.(chipmunk-lispify "cpSpaceProcessComponents" 'function)) :void
  (space :pointer)
  (dt :double))

(clipmunk-defcfun ("cpSpacePushFreshContactBuffer" #.(chipmunk-lispify "cpSpacePushFreshContactBuffer" 'function)) :void
  (space :pointer))

(clipmunk-defcfun ("cpContactBufferGetArray" #.(chipmunk-lispify "cpContactBufferGetArray" 'function)) :pointer
  (space :pointer))

(clipmunk-defcfun ("cpSpacePushContacts" #.(chipmunk-lispify "cpSpacePushContacts" 'function)) :void
  (space :pointer)
  (count :int))

(clipmunk-defcstruct #.(chipmunk-lispify "cpPostStepCallback" 'classname)
	(#.(chipmunk-lispify "func" 'slotname) :pointer)
	(#.(chipmunk-lispify "key" 'slotname) :pointer)
	(#.(chipmunk-lispify "data" 'slotname) :pointer))

(clipmunk-defcfun ("cpSpaceGetPostStepCallback" #.(chipmunk-lispify "cpSpaceGetPostStepCallback" 'function)) :pointer
  (space :pointer)
  (key :pointer))

(clipmunk-defcfun ("cpSpaceArbiterSetFilter" #.(chipmunk-lispify "cpSpaceArbiterSetFilter" 'function)) :int
  (arb :pointer)
  (space :pointer))

(clipmunk-defcfun ("cpSpaceFilterArbiters" #.(chipmunk-lispify "cpSpaceFilterArbiters" 'function)) :void
  (space :pointer)
  (body :pointer)
  (filter :pointer))

(clipmunk-defcfun ("cpSpaceActivateBody" #.(chipmunk-lispify "cpSpaceActivateBody" 'function)) :void
  (space :pointer)
  (body :pointer))

(clipmunk-defcfun ("cpSpaceLock" #.(chipmunk-lispify "cpSpaceLock" 'function)) :void
  (space :pointer))

(clipmunk-defcfun ("cpSpaceUnlock" #.(chipmunk-lispify "cpSpaceUnlock" 'function)) :void
  (space :pointer)
  (runPostStep :int))

(clipmunk-defcfun ("cpSpaceLookupHandler" #.(chipmunk-lispify "cpSpaceLookupHandler" 'function)) :pointer
  (space :pointer)
  (a :pointer)
  (b :pointer))

(clipmunk-defcfun ("cpSpaceUncacheArbiter" #.(chipmunk-lispify "cpSpaceUncacheArbiter" 'function)) :void
  (space :pointer)
  (arb :pointer))

(clipmunk-defcfun ("cpShapeUpdateFunc" #.(chipmunk-lispify "cpShapeUpdateFunc" 'function)) :void
  (shape :pointer)
  (unused :pointer))

(clipmunk-defcfun ("cpSpaceCollideShapes" #.(chipmunk-lispify "cpSpaceCollideShapes" 'function)) :void
  (a :pointer)
  (b :pointer)
  (space :pointer))

(clipmunk-defcstruct #.(chipmunk-lispify "cpContact" 'classname)
	(p-x :double) (p-y :double)
	(n-x :double) (n-y :double)
	(#.(chipmunk-lispify "dist" 'slotname) :double)
	(#.(chipmunk-lispify "r1" 'slotname) :pointer)
	(#.(chipmunk-lispify "r2" 'slotname) :pointer)
	(#.(chipmunk-lispify "nMass" 'slotname) :double)
	(#.(chipmunk-lispify "tMass" 'slotname) :double)
	(#.(chipmunk-lispify "bounce" 'slotname) :double)
	(#.(chipmunk-lispify "jnAcc" 'slotname) :double)
	(#.(chipmunk-lispify "jtAcc" 'slotname) :double)
	(#.(chipmunk-lispify "jBias" 'slotname) :double)
	(#.(chipmunk-lispify "bias" 'slotname) :double)
	(#.(chipmunk-lispify "hash" 'slotname) :pointer))

(clipmunk-defcfun ("cpContactInit" #.(chipmunk-lispify "cpContactInit" 'function)) :pointer
  (con :pointer)
  (p :pointer)
  (n :pointer)
  (dist :double)
  (hash :pointer))

(clipmunk-defcfun ("cpArbiterInit" #.(chipmunk-lispify "cpArbiterInit" 'function)) :pointer
  (arb :pointer)
  (a :pointer)
  (b :pointer))

(clipmunk-defcfun ("cpArbiterCallSeparate" #.(chipmunk-lispify "cpArbiterCallSeparate" 'function)) :void
  (arb :pointer)
  (space :pointer))

(clipmunk-defcfun ("cpArbiterThreadForBody" #.(chipmunk-lispify "cpArbiterThreadForBody" 'function)) :pointer
  (arb :pointer)
  (body :pointer))

(clipmunk-defcfun ("cpArbiterUnthread" #.(chipmunk-lispify "cpArbiterUnthread" 'function)) :void
  (arb :pointer))

(clipmunk-defcfun ("cpArbiterUpdate" #.(chipmunk-lispify "cpArbiterUpdate" 'function)) :void
  (arb :pointer)
  (contacts :pointer)
  (numContacts :int)
  (handler :pointer)
  (a :pointer)
  (b :pointer))

(clipmunk-defcfun ("cpArbiterPreStep" #.(chipmunk-lispify "cpArbiterPreStep" 'function)) :void
  (arb :pointer)
  (dt :double)
  (bias :double)
  (slop :double))

(clipmunk-defcfun ("cpArbiterApplyCachedImpulse" #.(chipmunk-lispify "cpArbiterApplyCachedImpulse" 'function)) :void
  (arb :pointer)
  (dt_coef :double))

(clipmunk-defcfun ("cpArbiterApplyImpulse" #.(chipmunk-lispify "cpArbiterApplyImpulse" 'function)) :void
  (arb :pointer))

(clipmunk-defcfun ("cpMessage" #.(chipmunk-lispify "cpMessage" 'function)) :void
  (condition :string)
  (file :string)
  (line :int)
  (isError :int)
  (isHardError :int)
  (message :string)
  &rest)

(cl:defconstant #.(chipmunk-lispify "CP_BUFFER_BYTES" 'constant) (cl:* 32 1024))

(cl:defconstant #.(chipmunk-lispify "CP_VERSION_MAJOR" 'constant) 6)

(cl:defconstant #.(chipmunk-lispify "CP_VERSION_MINOR" 'constant) 1)

(cl:defconstant #.(chipmunk-lispify "CP_VERSION_RELEASE" 'constant) 3)

(cffi:defcvar ("cpVersionString" #.(chipmunk-lispify "cpVersionString" 'variable))
 :string)

(clipmunk-defcfun ("cpInitChipmunk" #.(chipmunk-lispify "cpInitChipmunk" 'function)) :void)

(clipmunk-defcfun ("cpEnableSegmentToSegmentCollisions" #.(chipmunk-lispify "cpEnableSegmentToSegmentCollisions" 'function)) :void)

(clipmunk-defcfun ("cpAreaForCircle" #.(chipmunk-lispify "cpAreaForCircle" 'function)) :double
  (r1 :double)
  (r2 :double))

(clipmunk-defcfun ("cpAreaForSegment" #.(chipmunk-lispify "cpAreaForSegment" 'function)) :double
  (a :pointer)
  (b :pointer)
  (r :double))

(clipmunk-defcfun ("cpAreaForPoly" #.(chipmunk-lispify "cpAreaForPoly" 'function)) :double
  (numVerts :int)
  (verts :pointer))

(clipmunk-defcfun ("cpCentroidForPoly" #.(chipmunk-lispify "cpCentroidForPoly" 'function)) :pointer
  (numVerts :int)
  (verts :pointer))

(clipmunk-defcfun ("cpRecenterPoly" #.(chipmunk-lispify "cpRecenterPoly" 'function)) :void
  (numVerts :int)
  (verts :pointer))

(clipmunk-defcfun ("cpMomentForBox" #.(chipmunk-lispify "cpMomentForBox" 'function)) :double
  (m :double)
  (width :double)
  (height :double))

(clipmunk-defcfun ("cpMomentForBox2" #.(chipmunk-lispify "cpMomentForBox2" 'function)) :double
  (m :double)
  (box :pointer))

(clipmunk-defcfun ("cpConvexHull" #.(chipmunk-lispify "cpConvexHull" 'function)) :int
  (count :int)
  (verts :pointer)
  (result :pointer)
  (first :pointer)
  (tol :double))

(cl:defconstant #.(chipmunk-lispify "CP_USE_DOUBLES" 'constant) 1)

(cl:defconstant #.(chipmunk-lispify "M_PI" 'constant) 3.14159265358979323846264338327950288d0)

(cl:defconstant #.(chipmunk-lispify "M_E" 'constant) 2.71828182845904523536028747135266250d0)

(clipmunk-defcfun ("cpfclamp01" #.(chipmunk-lispify "cpfclamp01" 'function)) :double
  (f :double))

(cl:defconstant #.(chipmunk-lispify "cpTrue" 'constant) 1)

(cl:defconstant #.(chipmunk-lispify "cpFalse" 'constant) 0)

(clipmunk-defcstruct #.(chipmunk-lispify "cpVect" 'classname)
	(#.(chipmunk-lispify "x" 'slotname) :double)
	(#.(chipmunk-lispify "y" 'slotname) :double))

(clipmunk-defcstruct #.(chipmunk-lispify "cpMat2x2" 'classname)
	(#.(chipmunk-lispify "a" 'slotname) :double)
	(#.(chipmunk-lispify "b" 'slotname) :double)
	(#.(chipmunk-lispify "c" 'slotname) :double)
	(#.(chipmunk-lispify "d" 'slotname) :double))

(clipmunk-defcfun ("cpvstr" #.(chipmunk-lispify "cpvstr" 'function)) :string
  (v-x :double) (v-y :double))

(clipmunk-defcfun ("cpvtoangle" #.(chipmunk-lispify "cpvtoangle" 'function)) :double
  (v-x :double) (v-y :double))

(clipmunk-defcfun ("cpvlength" #.(chipmunk-lispify "cpvlength" 'function)) :double
  (v-x :double) (v-y :double))

(clipmunk-defcfun ("cpMat2x2New" #.(chipmunk-lispify "cpMat2x2New" 'function)) #.(chipmunk-lispify "cpMat2x2" 'classname)
  (a :double)
  (b :double)
  (c :double)
  (d :double))

(clipmunk-defcfun ("cpMat2x2Transform" #.(chipmunk-lispify "cpMat2x2Transform" 'function)) #.(chipmunk-lispify "cpVect" 'classname)
  (m #.(chipmunk-lispify "cpMat2x2" 'classname))
  (v-x :double) (v-y :double))

(clipmunk-defcstruct #.(chipmunk-lispify "cpBB" 'classname)
	(#.(chipmunk-lispify "l" 'slotname) :double)
	(#.(chipmunk-lispify "b" 'slotname) :double)
	(#.(chipmunk-lispify "r" 'slotname) :double)
	(#.(chipmunk-lispify "t" 'slotname) :double))

(clipmunk-defcfun ("cpBBNewForCircle" #.(chipmunk-lispify "cpBBNewForCircle" 'function)) #.(chipmunk-lispify "cpBB" 'classname)
  (p-x :double) (p-y :double)
  (r :double))

(clipmunk-defcfun ("cpBBIntersects" #.(chipmunk-lispify "cpBBIntersects" 'function)) :int
  (a #.(chipmunk-lispify "cpBB" 'classname))
  (b #.(chipmunk-lispify "cpBB" 'classname)))

(clipmunk-defcfun ("cpBBContainsBB" #.(chipmunk-lispify "cpBBContainsBB" 'function)) :int
  (bb #.(chipmunk-lispify "cpBB" 'classname))
  (other #.(chipmunk-lispify "cpBB" 'classname)))

(clipmunk-defcfun ("cpBBContainsVect" #.(chipmunk-lispify "cpBBContainsVect" 'function)) :int
  (bb #.(chipmunk-lispify "cpBB" 'classname))
  (v-x :double) (v-y :double))

(clipmunk-defcfun ("cpBBMerge" #.(chipmunk-lispify "cpBBMerge" 'function)) #.(chipmunk-lispify "cpBB" 'classname)
  (a #.(chipmunk-lispify "cpBB" 'classname))
  (b #.(chipmunk-lispify "cpBB" 'classname)))

(clipmunk-defcfun ("cpBBExpand" #.(chipmunk-lispify "cpBBExpand" 'function)) #.(chipmunk-lispify "cpBB" 'classname)
  (bb #.(chipmunk-lispify "cpBB" 'classname))
  (v-x :double) (v-y :double))

(clipmunk-defcfun ("cpBBArea" #.(chipmunk-lispify "cpBBArea" 'function)) :double
  (bb #.(chipmunk-lispify "cpBB" 'classname)))

(clipmunk-defcfun ("cpBBMergedArea" #.(chipmunk-lispify "cpBBMergedArea" 'function)) :double
  (a #.(chipmunk-lispify "cpBB" 'classname))
  (b #.(chipmunk-lispify "cpBB" 'classname)))

(clipmunk-defcfun ("cpBBSegmentQuery" #.(chipmunk-lispify "cpBBSegmentQuery" 'function)) :double
  (bb #.(chipmunk-lispify "cpBB" 'classname))
  (a-x :double) (a-y :double)
  (b-x :double) (b-y :double))

(clipmunk-defcfun ("cpBBIntersectsSegment" #.(chipmunk-lispify "cpBBIntersectsSegment" 'function)) :int
  (bb #.(chipmunk-lispify "cpBB" 'classname))
  (a-x :double) (a-y :double)
  (b-x :double) (b-y :double))

(clipmunk-defcstruct #.(chipmunk-lispify "cpComponentNode" 'classname)
	(#.(chipmunk-lispify "root" 'slotname) :pointer)
	(#.(chipmunk-lispify "next" 'slotname) :pointer)
	(#.(chipmunk-lispify "idleTime" 'slotname) :double))

(clipmunk-defcstruct #.(chipmunk-lispify "cpBody" 'classname)
	(#.(chipmunk-lispify "velocity_func" 'slotname) :pointer)
	(#.(chipmunk-lispify "position_func" 'slotname) :pointer)
	(#.(chipmunk-lispify "m" 'slotname) :double)
	(#.(chipmunk-lispify "m_inv" 'slotname) :double)
	(#.(chipmunk-lispify "i" 'slotname) :double)
	(#.(chipmunk-lispify "i_inv" 'slotname) :double)
	(p-x :double) (p-y :double)
	(v-x :double) (v-y :double)
	(f-x :double) (f-y :double)
	(#.(chipmunk-lispify "a" 'slotname) :double)
	(#.(chipmunk-lispify "w" 'slotname) :double)
	(#.(chipmunk-lispify "t" 'slotname) :double)
	(rot-x :double) (rot-y :double)
	(#.(chipmunk-lispify "data" 'slotname) :pointer)
	(#.(chipmunk-lispify "v_limit" 'slotname) :double)
	(#.(chipmunk-lispify "w_limit" 'slotname) :double)
	(v_bias-x :double) (v_bias-y :double)
	(#.(chipmunk-lispify "w_bias" 'slotname) :double)
	(#.(chipmunk-lispify "space" 'slotname) :pointer)
	(#.(chipmunk-lispify "shapeList" 'slotname) :pointer)
	(#.(chipmunk-lispify "arbiterList" 'slotname) :pointer)
	(#.(chipmunk-lispify "constraintList" 'slotname) :pointer)
	(#.(chipmunk-lispify "node" 'slotname) #.(chipmunk-lispify "cpComponentNode" 'classname)))

(clipmunk-defcfun ("cpBodyAlloc" #.(chipmunk-lispify "cpBodyAlloc" 'function)) :pointer)

(clipmunk-defcfun ("cpBodyInit" #.(chipmunk-lispify "cpBodyInit" 'function)) :pointer
  (body :pointer)
  (m :double)
  (i :double))

(clipmunk-defcfun ("cpBodyNew" #.(chipmunk-lispify "cpBodyNew" 'function)) :pointer
  (m :double)
  (i :double))

(clipmunk-defcfun ("cpBodyInitStatic" #.(chipmunk-lispify "cpBodyInitStatic" 'function)) :pointer
  (body :pointer))

(clipmunk-defcfun ("cpBodyNewStatic" #.(chipmunk-lispify "cpBodyNewStatic" 'function)) :pointer)

(clipmunk-defcfun ("cpBodyDestroy" #.(chipmunk-lispify "cpBodyDestroy" 'function)) :void
  (body :pointer))

(clipmunk-defcfun ("cpBodyFree" #.(chipmunk-lispify "cpBodyFree" 'function)) :void
  (body :pointer))

(clipmunk-defcfun ("cpBodySanityCheck" #.(chipmunk-lispify "cpBodySanityCheck" 'function)) :void
  (body :pointer))

(clipmunk-defcfun ("cpBodyActivate" #.(chipmunk-lispify "cpBodyActivate" 'function)) :void
  (body :pointer))

(clipmunk-defcfun ("cpBodyActivateStatic" #.(chipmunk-lispify "cpBodyActivateStatic" 'function)) :void
  (body :pointer)
  (filter :pointer))

(clipmunk-defcfun ("cpBodySleep" #.(chipmunk-lispify "cpBodySleep" 'function)) :void
  (body :pointer))

(clipmunk-defcfun ("cpBodySleepWithGroup" #.(chipmunk-lispify "cpBodySleepWithGroup" 'function)) :void
  (body :pointer)
  (group :pointer))

(clipmunk-defcfun ("cpBodyIsStatic" #.(chipmunk-lispify "cpBodyIsStatic" 'function)) :int
  (body :pointer))

(clipmunk-defcfun ("cpBodyGetSpace" #.(chipmunk-lispify "cpBodyGetSpace" 'function)) :pointer
  (body :pointer))

(clipmunk-defcfun ("cpBodyGetMass" #.(chipmunk-lispify "cpBodyGetMass" 'function)) :double
  (body :pointer))

(clipmunk-defcfun ("cpBodySetMass" #.(chipmunk-lispify "cpBodySetMass" 'function)) :void
  (body :pointer)
  (m :double))

(clipmunk-defcfun ("cpBodyGetMoment" #.(chipmunk-lispify "cpBodyGetMoment" 'function)) :double
  (body :pointer))

(clipmunk-defcfun ("cpBodySetMoment" #.(chipmunk-lispify "cpBodySetMoment" 'function)) :void
  (body :pointer)
  (i :double))

(clipmunk-defcfun ("cpBodySetPos" #.(chipmunk-lispify "cpBodySetPos" 'function)) :void
  (body :pointer)
  (pos-x :double) (pos-y :double))

(clipmunk-defcfun ("cpBodySetVel" #.(chipmunk-lispify "cpBodySetVel" 'function)) :void
  (body :pointer)
  (value-x :double) (value-y :double))

(clipmunk-defcfun ("cpBodySetForce" #.(chipmunk-lispify "cpBodySetForce" 'function)) :void
  (body :pointer)
  (value-x :double) (value-y :double))

(clipmunk-defcfun ("cpBodyGetAngle" #.(chipmunk-lispify "cpBodyGetAngle" 'function)) :double
  (body :pointer))

(clipmunk-defcfun ("cpBodySetAngle" #.(chipmunk-lispify "cpBodySetAngle" 'function)) :void
  (body :pointer)
  (a :double))

(clipmunk-defcfun ("cpBodyGetAngVel" #.(chipmunk-lispify "cpBodyGetAngVel" 'function)) :double
  (body :pointer))

(clipmunk-defcfun ("cpBodySetAngVel" #.(chipmunk-lispify "cpBodySetAngVel" 'function)) :void
  (body :pointer)
  (value :double))

(clipmunk-defcfun ("cpBodyGetTorque" #.(chipmunk-lispify "cpBodyGetTorque" 'function)) :double
  (body :pointer))

(clipmunk-defcfun ("cpBodySetTorque" #.(chipmunk-lispify "cpBodySetTorque" 'function)) :void
  (body :pointer)
  (value :double))

(clipmunk-defcfun ("cpBodyGetVelLimit" #.(chipmunk-lispify "cpBodyGetVelLimit" 'function)) :double
  (body :pointer))

(clipmunk-defcfun ("cpBodySetVelLimit" #.(chipmunk-lispify "cpBodySetVelLimit" 'function)) :void
  (body :pointer)
  (value :double))

(clipmunk-defcfun ("cpBodyGetAngVelLimit" #.(chipmunk-lispify "cpBodyGetAngVelLimit" 'function)) :double
  (body :pointer))

(clipmunk-defcfun ("cpBodySetAngVelLimit" #.(chipmunk-lispify "cpBodySetAngVelLimit" 'function)) :void
  (body :pointer)
  (value :double))

(clipmunk-defcfun ("cpBodyGetUserData" #.(chipmunk-lispify "cpBodyGetUserData" 'function)) :pointer
  (body :pointer))

(clipmunk-defcfun ("cpBodySetUserData" #.(chipmunk-lispify "cpBodySetUserData" 'function)) :void
  (body :pointer)
  (value :pointer))

(clipmunk-defcfun ("cpBodyUpdateVelocity" #.(chipmunk-lispify "cpBodyUpdateVelocity" 'function)) :void
  (body :pointer)
  (gravity-x :double) (gravity-y :double)
  (damping :double)
  (dt :double))

(clipmunk-defcfun ("cpBodyUpdatePosition" #.(chipmunk-lispify "cpBodyUpdatePosition" 'function)) :void
  (body :pointer)
  (dt :double))

(clipmunk-defcfun ("cpBodyResetForces" #.(chipmunk-lispify "cpBodyResetForces" 'function)) :void
  (body :pointer))

(clipmunk-defcfun ("cpBodyApplyForce" #.(chipmunk-lispify "cpBodyApplyForce" 'function)) :void
  (body :pointer)
  (f-x :double) (f-y :double)
  (r-x :double) (r-y :double))

(clipmunk-defcfun ("cpBodyApplyImpulse" #.(chipmunk-lispify "cpBodyApplyImpulse" 'function)) :void
  (body :pointer)
  (j-x :double) (j-y :double)
  (r-x :double) (r-y :double))

(clipmunk-defcfun ("cpBodyGetVelAtWorldPoint" #.(chipmunk-lispify "cpBodyGetVelAtWorldPoint" 'function)) #.(chipmunk-lispify "cpVect" 'classname)
  (body :pointer)
  (point-x :double) (point-y :double))

(clipmunk-defcfun ("cpBodyGetVelAtLocalPoint" #.(chipmunk-lispify "cpBodyGetVelAtLocalPoint" 'function)) #.(chipmunk-lispify "cpVect" 'classname)
  (body :pointer)
  (point-x :double) (point-y :double))

(clipmunk-defcfun ("cpBodyEachShape" #.(chipmunk-lispify "cpBodyEachShape" 'function)) :void
  (body :pointer)
  (func :pointer)
  (data :pointer))

(clipmunk-defcfun ("cpBodyEachConstraint" #.(chipmunk-lispify "cpBodyEachConstraint" 'function)) :void
  (body :pointer)
  (func :pointer)
  (data :pointer))

(clipmunk-defcfun ("cpBodyEachArbiter" #.(chipmunk-lispify "cpBodyEachArbiter" 'function)) :void
  (body :pointer)
  (func :pointer)
  (data :pointer))

(clipmunk-defcstruct #.(chipmunk-lispify "cpNearestPointQueryInfo" 'classname)
	(#.(chipmunk-lispify "shape" 'slotname) :pointer)
	(p-x :double) (p-y :double)
	(#.(chipmunk-lispify "d" 'slotname) :double))

(clipmunk-defcstruct #.(chipmunk-lispify "cpSegmentQueryInfo" 'classname)
	(#.(chipmunk-lispify "shape" 'slotname) :pointer)
	(#.(chipmunk-lispify "t" 'slotname) :double)
	(n-x :double) (n-y :double))

(cffi:defcenum #.(chipmunk-lispify "cpShapeType" 'enumname)
	#.(chipmunk-lispify "CP_CIRCLE_SHAPE" 'enumvalue :keyword)
	#.(chipmunk-lispify "CP_SEGMENT_SHAPE" 'enumvalue :keyword)
	#.(chipmunk-lispify "CP_POLY_SHAPE" 'enumvalue :keyword)
	#.(chipmunk-lispify "CP_NUM_SHAPES" 'enumvalue :keyword))

(clipmunk-defcstruct #.(chipmunk-lispify "cpShapeClass" 'classname)
	(#.(chipmunk-lispify "type" 'slotname) #.(chipmunk-lispify "cpShapeType" 'enumname))
	(#.(chipmunk-lispify "cacheData" 'slotname) :pointer)
	(#.(chipmunk-lispify "destroy" 'slotname) :pointer)
	(#.(chipmunk-lispify "nearestPointQuery" 'slotname) :pointer)
	(#.(chipmunk-lispify "segmentQuery" 'slotname) :pointer))

(clipmunk-defcstruct #.(chipmunk-lispify "cpShape" 'classname)
	(#.(chipmunk-lispify "klass" 'slotname) :pointer)
	(#.(chipmunk-lispify "body" 'slotname) :pointer)
	(#.(chipmunk-lispify "bb" 'slotname) #.(chipmunk-lispify "cpBB" 'classname))
	(#.(chipmunk-lispify "sensor" 'slotname) :int)
	(#.(chipmunk-lispify "e" 'slotname) :double)
	(#.(chipmunk-lispify "u" 'slotname) :double)
	(surface_v-x :double) (surface_v-y :double)
	(#.(chipmunk-lispify "data" 'slotname) :pointer)
	(#.(chipmunk-lispify "collision_type" 'slotname) :pointer)
	(#.(chipmunk-lispify "group" 'slotname) :pointer)
	(#.(chipmunk-lispify "layers" 'slotname) :unsigned-int)
	(#.(chipmunk-lispify "space" 'slotname) :pointer)
	(#.(chipmunk-lispify "next" 'slotname) :pointer)
	(#.(chipmunk-lispify "prev" 'slotname) :pointer)
	(#.(chipmunk-lispify "hashid" 'slotname) :pointer))

(clipmunk-defcfun ("cpShapeDestroy" #.(chipmunk-lispify "cpShapeDestroy" 'function)) :void
  (shape :pointer))

(clipmunk-defcfun ("cpShapeFree" #.(chipmunk-lispify "cpShapeFree" 'function)) :void
  (shape :pointer))

(clipmunk-defcfun ("cpShapeCacheBB" #.(chipmunk-lispify "cpShapeCacheBB" 'function)) #.(chipmunk-lispify "cpBB" 'classname)
  (shape :pointer))

(clipmunk-defcfun ("cpShapeUpdate" #.(chipmunk-lispify "cpShapeUpdate" 'function)) #.(chipmunk-lispify "cpBB" 'classname)
  (shape :pointer)
  (pos-x :double) (pos-y :double)
  (rot-x :double) (rot-y :double))

(clipmunk-defcfun ("cpShapePointQuery" #.(chipmunk-lispify "cpShapePointQuery" 'function)) :int
  (shape :pointer)
  (p-x :double) (p-y :double))

(clipmunk-defcfun ("cpShapeNearestPointQuery" #.(chipmunk-lispify "cpShapeNearestPointQuery" 'function)) :double
  (shape :pointer)
  (p-x :double) (p-y :double)
  (out :pointer))

(clipmunk-defcfun ("cpShapeSegmentQuery" #.(chipmunk-lispify "cpShapeSegmentQuery" 'function)) :int
  (shape :pointer)
  (a-x :double) (a-y :double)
  (b-x :double) (b-y :double)
  (info :pointer))

(clipmunk-defcfun ("cpShapeGetSpace" #.(chipmunk-lispify "cpShapeGetSpace" 'function)) :pointer
  (shape :pointer))

(clipmunk-defcfun ("cpShapeGetBody" #.(chipmunk-lispify "cpShapeGetBody" 'function)) :pointer
  (shape :pointer))

(clipmunk-defcfun ("cpShapeSetBody" #.(chipmunk-lispify "cpShapeSetBody" 'function)) :void
  (shape :pointer)
  (body :pointer))

(clipmunk-defcfun ("cpShapeGetBB" #.(chipmunk-lispify "cpShapeGetBB" 'function)) #.(chipmunk-lispify "cpBB" 'classname)
  (shape :pointer))

(clipmunk-defcfun ("cpShapeGetSensor" #.(chipmunk-lispify "cpShapeGetSensor" 'function)) :int
  (shape :pointer))

(clipmunk-defcfun ("cpShapeSetSensor" #.(chipmunk-lispify "cpShapeSetSensor" 'function)) :void
  (shape :pointer)
  (value :int))

(clipmunk-defcfun ("cpShapeGetElasticity" #.(chipmunk-lispify "cpShapeGetElasticity" 'function)) :double
  (shape :pointer))

(clipmunk-defcfun ("cpShapeSetElasticity" #.(chipmunk-lispify "cpShapeSetElasticity" 'function)) :void
  (shape :pointer)
  (value :double))

(clipmunk-defcfun ("cpShapeGetFriction" #.(chipmunk-lispify "cpShapeGetFriction" 'function)) :double
  (shape :pointer))

(clipmunk-defcfun ("cpShapeSetFriction" #.(chipmunk-lispify "cpShapeSetFriction" 'function)) :void
  (shape :pointer)
  (value :double))

(clipmunk-defcfun ("cpShapeGetSurfaceVelocity" #.(chipmunk-lispify "cpShapeGetSurfaceVelocity" 'function)) #.(chipmunk-lispify "cpVect" 'classname)
  (shape :pointer))

(clipmunk-defcfun ("cpShapeSetSurfaceVelocity" #.(chipmunk-lispify "cpShapeSetSurfaceVelocity" 'function)) :void
  (shape :pointer)
  (value-x :double) (value-y :double))

(clipmunk-defcfun ("cpShapeGetUserData" #.(chipmunk-lispify "cpShapeGetUserData" 'function)) :pointer
  (shape :pointer))

(clipmunk-defcfun ("cpShapeSetUserData" #.(chipmunk-lispify "cpShapeSetUserData" 'function)) :void
  (shape :pointer)
  (value :pointer))

(clipmunk-defcfun ("cpShapeGetCollisionType" #.(chipmunk-lispify "cpShapeGetCollisionType" 'function)) :pointer
  (shape :pointer))

(clipmunk-defcfun ("cpShapeSetCollisionType" #.(chipmunk-lispify "cpShapeSetCollisionType" 'function)) :void
  (shape :pointer)
  (value :pointer))

(clipmunk-defcfun ("cpShapeGetGroup" #.(chipmunk-lispify "cpShapeGetGroup" 'function)) :pointer
  (shape :pointer))

(clipmunk-defcfun ("cpShapeSetGroup" #.(chipmunk-lispify "cpShapeSetGroup" 'function)) :void
  (shape :pointer)
  (value :pointer))

(clipmunk-defcfun ("cpShapeGetLayers" #.(chipmunk-lispify "cpShapeGetLayers" 'function)) :unsigned-int
  (shape :pointer))

(clipmunk-defcfun ("cpShapeSetLayers" #.(chipmunk-lispify "cpShapeSetLayers" 'function)) :void
  (shape :pointer)
  (value :unsigned-int))

(clipmunk-defcfun ("cpResetShapeIdCounter" #.(chipmunk-lispify "cpResetShapeIdCounter" 'function)) :void)

(clipmunk-defcstruct #.(chipmunk-lispify "cpCircleShape" 'classname)
	(#.(chipmunk-lispify "shape" 'slotname) #.(chipmunk-lispify "cpShape" 'classname))
	(c-x :double) (c-y :double)
	(tc-x :double) (tc-y :double)
	(#.(chipmunk-lispify "r" 'slotname) :double))

(clipmunk-defcfun ("cpCircleShapeAlloc" #.(chipmunk-lispify "cpCircleShapeAlloc" 'function)) :pointer)

(clipmunk-defcfun ("cpCircleShapeInit" #.(chipmunk-lispify "cpCircleShapeInit" 'function)) :pointer
  (circle :pointer)
  (body :pointer)
  (radius :double)
  (offset-x :double) (offset-y :double))

(clipmunk-defcfun ("cpCircleShapeNew" #.(chipmunk-lispify "cpCircleShapeNew" 'function)) :pointer
  (body :pointer)
  (radius :double)
  (offset-x :double) (offset-y :double))

(clipmunk-defcfun ("cpCircleShapeGetRadius" #.(chipmunk-lispify "cpCircleShapeGetRadius" 'function)) :double
  (shape :pointer))

(clipmunk-defcstruct #.(chipmunk-lispify "cpSegmentShape" 'classname)
	(#.(chipmunk-lispify "shape" 'slotname) #.(chipmunk-lispify "cpShape" 'classname))
	(a-x :double) (a-y :double)
	(b-x :double) (b-y :double)
	(n-x :double) (n-y :double)
	(ta-x :double) (ta-y :double)
	(tb-x :double) (tb-y :double)
	(tn-x :double) (tn-y :double)
	(#.(chipmunk-lispify "r" 'slotname) :double)
	(a_tangent-x :double) (a_tangent-y :double)
	(b_tangent-x :double) (b_tangent-y :double))

(clipmunk-defcfun ("cpSegmentShapeAlloc" #.(chipmunk-lispify "cpSegmentShapeAlloc" 'function)) :pointer)

(clipmunk-defcfun ("cpSegmentShapeInit" #.(chipmunk-lispify "cpSegmentShapeInit" 'function)) :pointer
  (seg :pointer)
  (body :pointer)
  (a-x :double) (a-y :double)
  (b-x :double) (b-y :double)
  (radius :double))

(clipmunk-defcfun ("cpSegmentShapeNew" #.(chipmunk-lispify "cpSegmentShapeNew" 'function)) :pointer
  (body :pointer)
  (a-x :double) (a-y :double)
  (b-x :double) (b-y :double)
  (radius :double))

(clipmunk-defcfun ("cpSegmentShapeSetNeighbors" #.(chipmunk-lispify "cpSegmentShapeSetNeighbors" 'function)) :void
  (shape :pointer)
  (prev-x :double) (prev-y :double)
  (next-x :double) (next-y :double))

(clipmunk-defcfun ("cpSegmentShapeGetRadius" #.(chipmunk-lispify "cpSegmentShapeGetRadius" 'function)) :double
  (shape :pointer))

(clipmunk-defcstruct #.(chipmunk-lispify "cpSplittingPlane" 'classname)
	(n-x :double) (n-y :double)
	(#.(chipmunk-lispify "d" 'slotname) :double))

(clipmunk-defcstruct #.(chipmunk-lispify "cpPolyShape" 'classname)
	(#.(chipmunk-lispify "shape" 'slotname) #.(chipmunk-lispify "cpShape" 'classname))
	(#.(chipmunk-lispify "numVerts" 'slotname) :int)
	(#.(chipmunk-lispify "verts" 'slotname) :pointer)
	(#.(chipmunk-lispify "tVerts" 'slotname) :pointer)
	(#.(chipmunk-lispify "planes" 'slotname) :pointer)
	(#.(chipmunk-lispify "tPlanes" 'slotname) :pointer))

(clipmunk-defcfun ("cpPolyShapeAlloc" #.(chipmunk-lispify "cpPolyShapeAlloc" 'function)) :pointer)

(clipmunk-defcfun ("cpPolyShapeInit" #.(chipmunk-lispify "cpPolyShapeInit" 'function)) :pointer
  (poly :pointer)
  (body :pointer)
  (numVerts :int)
  (verts :pointer)
  (offset-x :double) (offset-y :double))

(clipmunk-defcfun ("cpPolyShapeNew" #.(chipmunk-lispify "cpPolyShapeNew" 'function)) :pointer
  (body :pointer)
  (numVerts :int)
  (verts :pointer)
  (offset-x :double) (offset-y :double))

(clipmunk-defcfun ("cpBoxShapeInit" #.(chipmunk-lispify "cpBoxShapeInit" 'function)) :pointer
  (poly :pointer)
  (body :pointer)
  (width :double)
  (height :double))

(clipmunk-defcfun ("cpBoxShapeInit2" #.(chipmunk-lispify "cpBoxShapeInit2" 'function)) :pointer
  (poly :pointer)
  (body :pointer)
  (box #.(chipmunk-lispify "cpBB" 'classname)))

(clipmunk-defcfun ("cpBoxShapeNew" #.(chipmunk-lispify "cpBoxShapeNew" 'function)) :pointer
  (body :pointer)
  (width :double)
  (height :double))

(clipmunk-defcfun ("cpBoxShapeNew2" #.(chipmunk-lispify "cpBoxShapeNew2" 'function)) :pointer
  (body :pointer)
  (box #.(chipmunk-lispify "cpBB" 'classname)))

(clipmunk-defcfun ("cpPolyValidate" #.(chipmunk-lispify "cpPolyValidate" 'function)) :int
  (verts :pointer)
  (numVerts :int))

(clipmunk-defcfun ("cpPolyShapeGetNumVerts" #.(chipmunk-lispify "cpPolyShapeGetNumVerts" 'function)) :int
  (shape :pointer))

(clipmunk-defcstruct #.(chipmunk-lispify "cpCollisionHandler" 'classname)
	(#.(chipmunk-lispify "a" 'slotname) :pointer)
	(#.(chipmunk-lispify "b" 'slotname) :pointer)
	(#.(chipmunk-lispify "begin" 'slotname) :pointer)
	(#.(chipmunk-lispify "preSolve" 'slotname) :pointer)
	(#.(chipmunk-lispify "postSolve" 'slotname) :pointer)
	(#.(chipmunk-lispify "separate" 'slotname) :pointer)
	(#.(chipmunk-lispify "data" 'slotname) :pointer))

(cl:defconstant #.(chipmunk-lispify "CP_MAX_CONTACTS_PER_ARBITER" 'constant) 4)

(cffi:defcenum #.(chipmunk-lispify "cpArbiterState" 'enumname)
	#.(chipmunk-lispify "cpArbiterStateFirstColl" 'enumvalue :keyword)
	#.(chipmunk-lispify "cpArbiterStateNormal" 'enumvalue :keyword)
	#.(chipmunk-lispify "cpArbiterStateIgnore" 'enumvalue :keyword)
	#.(chipmunk-lispify "cpArbiterStateCached" 'enumvalue :keyword))

(clipmunk-defcstruct #.(chipmunk-lispify "cpArbiterThread" 'classname)
	(#.(chipmunk-lispify "next" 'slotname) :pointer)
	(#.(chipmunk-lispify "prev" 'slotname) :pointer))

(clipmunk-defcstruct #.(chipmunk-lispify "cpArbiter" 'classname)
	(#.(chipmunk-lispify "e" 'slotname) :double)
	(#.(chipmunk-lispify "u" 'slotname) :double)
	(surface_vr-x :double) (surface_vr-y :double)
	(#.(chipmunk-lispify "data" 'slotname) :pointer)
	(#.(chipmunk-lispify "a" 'slotname) :pointer)
	(#.(chipmunk-lispify "b" 'slotname) :pointer)
	(#.(chipmunk-lispify "body_a" 'slotname) :pointer)
	(#.(chipmunk-lispify "body_b" 'slotname) :pointer)
	(#.(chipmunk-lispify "thread_a" 'slotname) #.(chipmunk-lispify "cpArbiterThread" 'classname))
	(#.(chipmunk-lispify "thread_b" 'slotname) #.(chipmunk-lispify "cpArbiterThread" 'classname))
	(#.(chipmunk-lispify "numContacts" 'slotname) :int)
	(#.(chipmunk-lispify "contacts" 'slotname) :pointer)
	(#.(chipmunk-lispify "stamp" 'slotname) :unsigned-int)
	(#.(chipmunk-lispify "handler" 'slotname) :pointer)
	(#.(chipmunk-lispify "swappedColl" 'slotname) :int)
	(#.(chipmunk-lispify "state" 'slotname) #.(chipmunk-lispify "cpArbiterState" 'enumname)))

(clipmunk-defcfun ("cpArbiterGetElasticity" #.(chipmunk-lispify "cpArbiterGetElasticity" 'function)) :double
  (arb :pointer))

(clipmunk-defcfun ("cpArbiterSetElasticity" #.(chipmunk-lispify "cpArbiterSetElasticity" 'function)) :void
  (arb :pointer)
  (value :double))

(clipmunk-defcfun ("cpArbiterGetFriction" #.(chipmunk-lispify "cpArbiterGetFriction" 'function)) :double
  (arb :pointer))

(clipmunk-defcfun ("cpArbiterSetFriction" #.(chipmunk-lispify "cpArbiterSetFriction" 'function)) :void
  (arb :pointer)
  (value :double))

(clipmunk-defcfun ("cpArbiterGetSurfaceVelocity" #.(chipmunk-lispify "cpArbiterGetSurfaceVelocity" 'function)) #.(chipmunk-lispify "cpVect" 'classname)
  (arb :pointer))

(clipmunk-defcfun ("cpArbiterSetSurfaceVelocity" #.(chipmunk-lispify "cpArbiterSetSurfaceVelocity" 'function)) :void
  (arb :pointer)
  (value-x :double) (value-y :double))

(clipmunk-defcfun ("cpArbiterGetUserData" #.(chipmunk-lispify "cpArbiterGetUserData" 'function)) :pointer
  (arb :pointer))

(clipmunk-defcfun ("cpArbiterSetUserData" #.(chipmunk-lispify "cpArbiterSetUserData" 'function)) :void
  (arb :pointer)
  (value :pointer))

(clipmunk-defcfun ("cpArbiterTotalKE" #.(chipmunk-lispify "cpArbiterTotalKE" 'function)) :double
  (arb :pointer))

(clipmunk-defcfun ("cpArbiterIgnore" #.(chipmunk-lispify "cpArbiterIgnore" 'function)) :void
  (arb :pointer))

(clipmunk-defcfun ("cpArbiterGetShapes" #.(chipmunk-lispify "cpArbiterGetShapes" 'function)) :void
  (arb :pointer)
  (a :pointer)
  (b :pointer))

(clipmunk-defcfun ("cpArbiterGetBodies" #.(chipmunk-lispify "cpArbiterGetBodies" 'function)) :void
  (arb :pointer)
  (a :pointer)
  (b :pointer))

(clipmunk-defcstruct #.(chipmunk-lispify "cpContactPointSet" 'classname)
	(#.(chipmunk-lispify "count" 'slotname) :int)
	(#.(chipmunk-lispify "points" 'slotname) :pointer))

(clipmunk-defcstruct #.(chipmunk-lispify "cpContactPointSet_points" 'classname)
	(point-x :double) (point-y :double)
	(normal-x :double) (normal-y :double)
	(#.(chipmunk-lispify "dist" 'slotname) :double))

(clipmunk-defcfun ("cpArbiterGetContactPointSet" #.(chipmunk-lispify "cpArbiterGetContactPointSet" 'function)) #.(chipmunk-lispify "cpContactPointSet" 'classname)
  (arb :pointer))

(clipmunk-defcfun ("cpArbiterIsFirstContact" #.(chipmunk-lispify "cpArbiterIsFirstContact" 'function)) :int
  (arb :pointer))

(clipmunk-defcfun ("cpArbiterGetCount" #.(chipmunk-lispify "cpArbiterGetCount" 'function)) :int
  (arb :pointer))

(clipmunk-defcfun ("cpArbiterGetDepth" #.(chipmunk-lispify "cpArbiterGetDepth" 'function)) :double
  (arb :pointer)
  (i :int))

(clipmunk-defcstruct #.(chipmunk-lispify "cpConstraintClass" 'classname)
	(#.(chipmunk-lispify "preStep" 'slotname) :pointer)
	(#.(chipmunk-lispify "applyCachedImpulse" 'slotname) :pointer)
	(#.(chipmunk-lispify "applyImpulse" 'slotname) :pointer)
	(#.(chipmunk-lispify "getImpulse" 'slotname) :pointer))

(clipmunk-defcstruct #.(chipmunk-lispify "cpConstraint" 'classname)
	(#.(chipmunk-lispify "klass" 'slotname) :pointer)
	(#.(chipmunk-lispify "a" 'slotname) :pointer)
	(#.(chipmunk-lispify "b" 'slotname) :pointer)
	(#.(chipmunk-lispify "space" 'slotname) :pointer)
	(#.(chipmunk-lispify "next_a" 'slotname) :pointer)
	(#.(chipmunk-lispify "next_b" 'slotname) :pointer)
	(#.(chipmunk-lispify "maxForce" 'slotname) :double)
	(#.(chipmunk-lispify "errorBias" 'slotname) :double)
	(#.(chipmunk-lispify "maxBias" 'slotname) :double)
	(#.(chipmunk-lispify "preSolve" 'slotname) :pointer)
	(#.(chipmunk-lispify "postSolve" 'slotname) :pointer)
	(#.(chipmunk-lispify "data" 'slotname) :pointer))

(clipmunk-defcfun ("cpConstraintDestroy" #.(chipmunk-lispify "cpConstraintDestroy" 'function)) :void
  (constraint :pointer))

(clipmunk-defcfun ("cpConstraintFree" #.(chipmunk-lispify "cpConstraintFree" 'function)) :void
  (constraint :pointer))

(clipmunk-defcfun ("cpConstraintActivateBodies" #.(chipmunk-lispify "cpConstraintActivateBodies" 'function)) :void
  (constraint :pointer))

(clipmunk-defcfun ("cpConstraintGetSpace" #.(chipmunk-lispify "cpConstraintGetSpace" 'function)) :pointer
  (constraint :pointer))

(clipmunk-defcfun ("cpConstraintGetA" #.(chipmunk-lispify "cpConstraintGetA" 'function)) :pointer
  (constraint :pointer))

(clipmunk-defcfun ("cpConstraintGetB" #.(chipmunk-lispify "cpConstraintGetB" 'function)) :pointer
  (constraint :pointer))

(clipmunk-defcfun ("cpConstraintGetMaxForce" #.(chipmunk-lispify "cpConstraintGetMaxForce" 'function)) :double
  (constraint :pointer))

(clipmunk-defcfun ("cpConstraintSetMaxForce" #.(chipmunk-lispify "cpConstraintSetMaxForce" 'function)) :void
  (constraint :pointer)
  (value :double))

(clipmunk-defcfun ("cpConstraintGetErrorBias" #.(chipmunk-lispify "cpConstraintGetErrorBias" 'function)) :double
  (constraint :pointer))

(clipmunk-defcfun ("cpConstraintSetErrorBias" #.(chipmunk-lispify "cpConstraintSetErrorBias" 'function)) :void
  (constraint :pointer)
  (value :double))

(clipmunk-defcfun ("cpConstraintGetMaxBias" #.(chipmunk-lispify "cpConstraintGetMaxBias" 'function)) :double
  (constraint :pointer))

(clipmunk-defcfun ("cpConstraintSetMaxBias" #.(chipmunk-lispify "cpConstraintSetMaxBias" 'function)) :void
  (constraint :pointer)
  (value :double))

(clipmunk-defcfun ("cpConstraintGetPreSolveFunc" #.(chipmunk-lispify "cpConstraintGetPreSolveFunc" 'function)) :pointer
  (constraint :pointer))

(clipmunk-defcfun ("cpConstraintSetPreSolveFunc" #.(chipmunk-lispify "cpConstraintSetPreSolveFunc" 'function)) :void
  (constraint :pointer)
  (value :pointer))

(clipmunk-defcfun ("cpConstraintGetPostSolveFunc" #.(chipmunk-lispify "cpConstraintGetPostSolveFunc" 'function)) :pointer
  (constraint :pointer))

(clipmunk-defcfun ("cpConstraintSetPostSolveFunc" #.(chipmunk-lispify "cpConstraintSetPostSolveFunc" 'function)) :void
  (constraint :pointer)
  (value :pointer))

(clipmunk-defcfun ("cpConstraintGetUserData" #.(chipmunk-lispify "cpConstraintGetUserData" 'function)) :pointer
  (constraint :pointer))

(clipmunk-defcfun ("cpConstraintSetUserData" #.(chipmunk-lispify "cpConstraintSetUserData" 'function)) :void
  (constraint :pointer)
  (value :pointer))

(clipmunk-defcfun ("cpConstraintGetImpulse" #.(chipmunk-lispify "cpConstraintGetImpulse" 'function)) :double
  (constraint :pointer))

(clipmunk-defcfun ("cpDampedRotarySpringGetClass" #.(chipmunk-lispify "cpDampedRotarySpringGetClass" 'function)) :pointer)

(clipmunk-defcstruct #.(chipmunk-lispify "cpDampedRotarySpring" 'classname)
	(#.(chipmunk-lispify "constraint" 'slotname) #.(chipmunk-lispify "cpConstraint" 'classname))
	(#.(chipmunk-lispify "restAngle" 'slotname) :double)
	(#.(chipmunk-lispify "stiffness" 'slotname) :double)
	(#.(chipmunk-lispify "damping" 'slotname) :double)
	(#.(chipmunk-lispify "springTorqueFunc" 'slotname) :pointer)
	(#.(chipmunk-lispify "target_wrn" 'slotname) :double)
	(#.(chipmunk-lispify "w_coef" 'slotname) :double)
	(#.(chipmunk-lispify "iSum" 'slotname) :double)
	(#.(chipmunk-lispify "jAcc" 'slotname) :double))

(clipmunk-defcfun ("cpDampedRotarySpringAlloc" #.(chipmunk-lispify "cpDampedRotarySpringAlloc" 'function)) :pointer)

(clipmunk-defcfun ("cpDampedRotarySpringInit" #.(chipmunk-lispify "cpDampedRotarySpringInit" 'function)) :pointer
  (joint :pointer)
  (a :pointer)
  (b :pointer)
  (restAngle :double)
  (stiffness :double)
  (damping :double))

(clipmunk-defcfun ("cpDampedRotarySpringNew" #.(chipmunk-lispify "cpDampedRotarySpringNew" 'function)) :pointer
  (a :pointer)
  (b :pointer)
  (restAngle :double)
  (stiffness :double)
  (damping :double))

(clipmunk-defcfun ("cpDampedRotarySpringGetRestAngle" #.(chipmunk-lispify "cpDampedRotarySpringGetRestAngle" 'function)) :double
  (constraint :pointer))

(clipmunk-defcfun ("cpDampedRotarySpringSetRestAngle" #.(chipmunk-lispify "cpDampedRotarySpringSetRestAngle" 'function)) :void
  (constraint :pointer)
  (value :double))

(clipmunk-defcfun ("cpDampedRotarySpringGetStiffness" #.(chipmunk-lispify "cpDampedRotarySpringGetStiffness" 'function)) :double
  (constraint :pointer))

(clipmunk-defcfun ("cpDampedRotarySpringSetStiffness" #.(chipmunk-lispify "cpDampedRotarySpringSetStiffness" 'function)) :void
  (constraint :pointer)
  (value :double))

(clipmunk-defcfun ("cpDampedRotarySpringGetDamping" #.(chipmunk-lispify "cpDampedRotarySpringGetDamping" 'function)) :double
  (constraint :pointer))

(clipmunk-defcfun ("cpDampedRotarySpringSetDamping" #.(chipmunk-lispify "cpDampedRotarySpringSetDamping" 'function)) :void
  (constraint :pointer)
  (value :double))

(clipmunk-defcfun ("cpDampedRotarySpringGetSpringTorqueFunc" #.(chipmunk-lispify "cpDampedRotarySpringGetSpringTorqueFunc" 'function)) :pointer
  (constraint :pointer))

(clipmunk-defcfun ("cpDampedRotarySpringSetSpringTorqueFunc" #.(chipmunk-lispify "cpDampedRotarySpringSetSpringTorqueFunc" 'function)) :void
  (constraint :pointer)
  (value :pointer))

(clipmunk-defcfun ("cpDampedSpringGetClass" #.(chipmunk-lispify "cpDampedSpringGetClass" 'function)) :pointer)

(clipmunk-defcstruct #.(chipmunk-lispify "cpDampedSpring" 'classname)
	(#.(chipmunk-lispify "constraint" 'slotname) #.(chipmunk-lispify "cpConstraint" 'classname))
	(anchr1-x :double) (anchr1-y :double)
	(anchr2-x :double) (anchr2-y :double)
	(#.(chipmunk-lispify "restLength" 'slotname) :double)
	(#.(chipmunk-lispify "stiffness" 'slotname) :double)
	(#.(chipmunk-lispify "damping" 'slotname) :double)
	(#.(chipmunk-lispify "springForceFunc" 'slotname) :pointer)
	(#.(chipmunk-lispify "target_vrn" 'slotname) :double)
	(#.(chipmunk-lispify "v_coef" 'slotname) :double)
	(r1-x :double) (r1-y :double)
	(r2-x :double) (r2-y :double)
	(#.(chipmunk-lispify "nMass" 'slotname) :double)
	(n-x :double) (n-y :double)
	(#.(chipmunk-lispify "jAcc" 'slotname) :double))

(clipmunk-defcfun ("cpDampedSpringAlloc" #.(chipmunk-lispify "cpDampedSpringAlloc" 'function)) :pointer)

(clipmunk-defcfun ("cpDampedSpringInit" #.(chipmunk-lispify "cpDampedSpringInit" 'function)) :pointer
  (joint :pointer)
  (a :pointer)
  (b :pointer)
  (anchr1-x :double) (anchr1-y :double)
  (anchr2-x :double) (anchr2-y :double)
  (restLength :double)
  (stiffness :double)
  (damping :double))

(clipmunk-defcfun ("cpDampedSpringNew" #.(chipmunk-lispify "cpDampedSpringNew" 'function)) :pointer
  (a :pointer)
  (b :pointer)
  (anchr1-x :double) (anchr1-y :double)
  (anchr2-x :double) (anchr2-y :double)
  (restLength :double)
  (stiffness :double)
  (damping :double))

(clipmunk-defcfun ("cpDampedSpringGetAnchr1" #.(chipmunk-lispify "cpDampedSpringGetAnchr1" 'function)) #.(chipmunk-lispify "cpVect" 'classname)
  (constraint :pointer))

(clipmunk-defcfun ("cpDampedSpringSetAnchr1" #.(chipmunk-lispify "cpDampedSpringSetAnchr1" 'function)) :void
  (constraint :pointer)
  (value-x :double) (value-y :double))

(clipmunk-defcfun ("cpDampedSpringGetAnchr2" #.(chipmunk-lispify "cpDampedSpringGetAnchr2" 'function)) #.(chipmunk-lispify "cpVect" 'classname)
  (constraint :pointer))

(clipmunk-defcfun ("cpDampedSpringSetAnchr2" #.(chipmunk-lispify "cpDampedSpringSetAnchr2" 'function)) :void
  (constraint :pointer)
  (value-x :double) (value-y :double))

(clipmunk-defcfun ("cpDampedSpringGetRestLength" #.(chipmunk-lispify "cpDampedSpringGetRestLength" 'function)) :double
  (constraint :pointer))

(clipmunk-defcfun ("cpDampedSpringSetRestLength" #.(chipmunk-lispify "cpDampedSpringSetRestLength" 'function)) :void
  (constraint :pointer)
  (value :double))

(clipmunk-defcfun ("cpDampedSpringGetStiffness" #.(chipmunk-lispify "cpDampedSpringGetStiffness" 'function)) :double
  (constraint :pointer))

(clipmunk-defcfun ("cpDampedSpringSetStiffness" #.(chipmunk-lispify "cpDampedSpringSetStiffness" 'function)) :void
  (constraint :pointer)
  (value :double))

(clipmunk-defcfun ("cpDampedSpringGetDamping" #.(chipmunk-lispify "cpDampedSpringGetDamping" 'function)) :double
  (constraint :pointer))

(clipmunk-defcfun ("cpDampedSpringSetDamping" #.(chipmunk-lispify "cpDampedSpringSetDamping" 'function)) :void
  (constraint :pointer)
  (value :double))

(clipmunk-defcfun ("cpDampedSpringGetSpringForceFunc" #.(chipmunk-lispify "cpDampedSpringGetSpringForceFunc" 'function)) :pointer
  (constraint :pointer))

(clipmunk-defcfun ("cpDampedSpringSetSpringForceFunc" #.(chipmunk-lispify "cpDampedSpringSetSpringForceFunc" 'function)) :void
  (constraint :pointer)
  (value :pointer))

(clipmunk-defcfun ("cpGearJointGetClass" #.(chipmunk-lispify "cpGearJointGetClass" 'function)) :pointer)

(clipmunk-defcstruct #.(chipmunk-lispify "cpGearJoint" 'classname)
	(#.(chipmunk-lispify "constraint" 'slotname) #.(chipmunk-lispify "cpConstraint" 'classname))
	(#.(chipmunk-lispify "phase" 'slotname) :double)
	(#.(chipmunk-lispify "ratio" 'slotname) :double)
	(#.(chipmunk-lispify "ratio_inv" 'slotname) :double)
	(#.(chipmunk-lispify "iSum" 'slotname) :double)
	(#.(chipmunk-lispify "bias" 'slotname) :double)
	(#.(chipmunk-lispify "jAcc" 'slotname) :double))

(clipmunk-defcfun ("cpGearJointAlloc" #.(chipmunk-lispify "cpGearJointAlloc" 'function)) :pointer)

(clipmunk-defcfun ("cpGearJointInit" #.(chipmunk-lispify "cpGearJointInit" 'function)) :pointer
  (joint :pointer)
  (a :pointer)
  (b :pointer)
  (phase :double)
  (ratio :double))

(clipmunk-defcfun ("cpGearJointNew" #.(chipmunk-lispify "cpGearJointNew" 'function)) :pointer
  (a :pointer)
  (b :pointer)
  (phase :double)
  (ratio :double))

(clipmunk-defcfun ("cpGearJointGetPhase" #.(chipmunk-lispify "cpGearJointGetPhase" 'function)) :double
  (constraint :pointer))

(clipmunk-defcfun ("cpGearJointSetPhase" #.(chipmunk-lispify "cpGearJointSetPhase" 'function)) :void
  (constraint :pointer)
  (value :double))

(clipmunk-defcfun ("cpGearJointGetRatio" #.(chipmunk-lispify "cpGearJointGetRatio" 'function)) :double
  (constraint :pointer))

(clipmunk-defcfun ("cpGearJointSetRatio" #.(chipmunk-lispify "cpGearJointSetRatio" 'function)) :void
  (constraint :pointer)
  (value :double))

(clipmunk-defcfun ("cpGrooveJointGetClass" #.(chipmunk-lispify "cpGrooveJointGetClass" 'function)) :pointer)

(clipmunk-defcstruct #.(chipmunk-lispify "cpGrooveJoint" 'classname)
	(#.(chipmunk-lispify "constraint" 'slotname) #.(chipmunk-lispify "cpConstraint" 'classname))
	(grv_n-x :double) (grv_n-y :double)
	(grv_a-x :double) (grv_a-y :double)
	(grv_b-x :double) (grv_b-y :double)
	(anchr2-x :double) (anchr2-y :double)
	(grv_tn-x :double) (grv_tn-y :double)
	(#.(chipmunk-lispify "clamp" 'slotname) :double)
	(r1-x :double) (r1-y :double)
	(r2-x :double) (r2-y :double)
	(#.(chipmunk-lispify "k" 'slotname) #.(chipmunk-lispify "cpMat2x2" 'classname))
	(jAcc-x :double) (jAcc-y :double)
	(bias-x :double) (bias-y :double))

(clipmunk-defcfun ("cpGrooveJointAlloc" #.(chipmunk-lispify "cpGrooveJointAlloc" 'function)) :pointer)

(clipmunk-defcfun ("cpGrooveJointInit" #.(chipmunk-lispify "cpGrooveJointInit" 'function)) :pointer
  (joint :pointer)
  (a :pointer)
  (b :pointer)
  (groove_a-x :double) (groove_a-y :double)
  (groove_b-x :double) (groove_b-y :double)
  (anchr2-x :double) (anchr2-y :double))

(clipmunk-defcfun ("cpGrooveJointNew" #.(chipmunk-lispify "cpGrooveJointNew" 'function)) :pointer
  (a :pointer)
  (b :pointer)
  (groove_a-x :double) (groove_a-y :double)
  (groove_b-x :double) (groove_b-y :double)
  (anchr2-x :double) (anchr2-y :double))

(clipmunk-defcfun ("cpGrooveJointGetGrooveA" #.(chipmunk-lispify "cpGrooveJointGetGrooveA" 'function)) #.(chipmunk-lispify "cpVect" 'classname)
  (constraint :pointer))

(clipmunk-defcfun ("cpGrooveJointSetGrooveA" #.(chipmunk-lispify "cpGrooveJointSetGrooveA" 'function)) :void
  (constraint :pointer)
  (value-x :double) (value-y :double))

(clipmunk-defcfun ("cpGrooveJointGetGrooveB" #.(chipmunk-lispify "cpGrooveJointGetGrooveB" 'function)) #.(chipmunk-lispify "cpVect" 'classname)
  (constraint :pointer))

(clipmunk-defcfun ("cpGrooveJointSetGrooveB" #.(chipmunk-lispify "cpGrooveJointSetGrooveB" 'function)) :void
  (constraint :pointer)
  (value-x :double) (value-y :double))

(clipmunk-defcfun ("cpGrooveJointGetAnchr2" #.(chipmunk-lispify "cpGrooveJointGetAnchr2" 'function)) #.(chipmunk-lispify "cpVect" 'classname)
  (constraint :pointer))

(clipmunk-defcfun ("cpGrooveJointSetAnchr2" #.(chipmunk-lispify "cpGrooveJointSetAnchr2" 'function)) :void
  (constraint :pointer)
  (value-x :double) (value-y :double))

(clipmunk-defcfun ("cpPinJointGetClass" #.(chipmunk-lispify "cpPinJointGetClass" 'function)) :pointer)

(clipmunk-defcstruct #.(chipmunk-lispify "cpPinJoint" 'classname)
	(#.(chipmunk-lispify "constraint" 'slotname) #.(chipmunk-lispify "cpConstraint" 'classname))
	(anchr1-x :double) (anchr1-y :double)
	(anchr2-x :double) (anchr2-y :double)
	(#.(chipmunk-lispify "dist" 'slotname) :double)
	(r1-x :double) (r1-y :double)
	(r2-x :double) (r2-y :double)
	(n-x :double) (n-y :double)
	(#.(chipmunk-lispify "nMass" 'slotname) :double)
	(#.(chipmunk-lispify "jnAcc" 'slotname) :double)
	(#.(chipmunk-lispify "bias" 'slotname) :double))

(clipmunk-defcfun ("cpPinJointAlloc" #.(chipmunk-lispify "cpPinJointAlloc" 'function)) :pointer)

(clipmunk-defcfun ("cpPinJointInit" #.(chipmunk-lispify "cpPinJointInit" 'function)) :pointer
  (joint :pointer)
  (a :pointer)
  (b :pointer)
  (anchr1-x :double) (anchr1-y :double)
  (anchr2-x :double) (anchr2-y :double))

(clipmunk-defcfun ("cpPinJointNew" #.(chipmunk-lispify "cpPinJointNew" 'function)) :pointer
  (a :pointer)
  (b :pointer)
  (anchr1-x :double) (anchr1-y :double)
  (anchr2-x :double) (anchr2-y :double))

(clipmunk-defcfun ("cpPinJointGetAnchr1" #.(chipmunk-lispify "cpPinJointGetAnchr1" 'function)) #.(chipmunk-lispify "cpVect" 'classname)
  (constraint :pointer))

(clipmunk-defcfun ("cpPinJointSetAnchr1" #.(chipmunk-lispify "cpPinJointSetAnchr1" 'function)) :void
  (constraint :pointer)
  (value-x :double) (value-y :double))

(clipmunk-defcfun ("cpPinJointGetAnchr2" #.(chipmunk-lispify "cpPinJointGetAnchr2" 'function)) #.(chipmunk-lispify "cpVect" 'classname)
  (constraint :pointer))

(clipmunk-defcfun ("cpPinJointSetAnchr2" #.(chipmunk-lispify "cpPinJointSetAnchr2" 'function)) :void
  (constraint :pointer)
  (value-x :double) (value-y :double))

(clipmunk-defcfun ("cpPinJointGetDist" #.(chipmunk-lispify "cpPinJointGetDist" 'function)) :double
  (constraint :pointer))

(clipmunk-defcfun ("cpPinJointSetDist" #.(chipmunk-lispify "cpPinJointSetDist" 'function)) :void
  (constraint :pointer)
  (value :double))

(clipmunk-defcfun ("cpPivotJointGetClass" #.(chipmunk-lispify "cpPivotJointGetClass" 'function)) :pointer)

(clipmunk-defcstruct #.(chipmunk-lispify "cpPivotJoint" 'classname)
	(#.(chipmunk-lispify "constraint" 'slotname) #.(chipmunk-lispify "cpConstraint" 'classname))
	(anchr1-x :double) (anchr1-y :double)
	(anchr2-x :double) (anchr2-y :double)
	(r1-x :double) (r1-y :double)
	(r2-x :double) (r2-y :double)
	(#.(chipmunk-lispify "k" 'slotname) #.(chipmunk-lispify "cpMat2x2" 'classname))
	(jAcc-x :double) (jAcc-y :double)
	(bias-x :double) (bias-y :double))

(clipmunk-defcfun ("cpPivotJointAlloc" #.(chipmunk-lispify "cpPivotJointAlloc" 'function)) :pointer)

(clipmunk-defcfun ("cpPivotJointInit" #.(chipmunk-lispify "cpPivotJointInit" 'function)) :pointer
  (joint :pointer)
  (a :pointer)
  (b :pointer)
  (anchr1-x :double) (anchr1-y :double)
  (anchr2-x :double) (anchr2-y :double))

(clipmunk-defcfun ("cpPivotJointNew" #.(chipmunk-lispify "cpPivotJointNew" 'function)) :pointer
  (a :pointer)
  (b :pointer)
  (pivot-x :double) (pivot-y :double))

(clipmunk-defcfun ("cpPivotJointNew2" #.(chipmunk-lispify "cpPivotJointNew2" 'function)) :pointer
  (a :pointer)
  (b :pointer)
  (anchr1-x :double) (anchr1-y :double)
  (anchr2-x :double) (anchr2-y :double))

(clipmunk-defcfun ("cpPivotJointGetAnchr1" #.(chipmunk-lispify "cpPivotJointGetAnchr1" 'function)) #.(chipmunk-lispify "cpVect" 'classname)
  (constraint :pointer))

(clipmunk-defcfun ("cpPivotJointSetAnchr1" #.(chipmunk-lispify "cpPivotJointSetAnchr1" 'function)) :void
  (constraint :pointer)
  (value-x :double) (value-y :double))

(clipmunk-defcfun ("cpPivotJointGetAnchr2" #.(chipmunk-lispify "cpPivotJointGetAnchr2" 'function)) #.(chipmunk-lispify "cpVect" 'classname)
  (constraint :pointer))

(clipmunk-defcfun ("cpPivotJointSetAnchr2" #.(chipmunk-lispify "cpPivotJointSetAnchr2" 'function)) :void
  (constraint :pointer)
  (value-x :double) (value-y :double))

(clipmunk-defcfun ("cpRatchetJointGetClass" #.(chipmunk-lispify "cpRatchetJointGetClass" 'function)) :pointer)

(clipmunk-defcstruct #.(chipmunk-lispify "cpRatchetJoint" 'classname)
	(#.(chipmunk-lispify "constraint" 'slotname) #.(chipmunk-lispify "cpConstraint" 'classname))
	(#.(chipmunk-lispify "angle" 'slotname) :double)
	(#.(chipmunk-lispify "phase" 'slotname) :double)
	(#.(chipmunk-lispify "ratchet" 'slotname) :double)
	(#.(chipmunk-lispify "iSum" 'slotname) :double)
	(#.(chipmunk-lispify "bias" 'slotname) :double)
	(#.(chipmunk-lispify "jAcc" 'slotname) :double))

(clipmunk-defcfun ("cpRatchetJointAlloc" #.(chipmunk-lispify "cpRatchetJointAlloc" 'function)) :pointer)

(clipmunk-defcfun ("cpRatchetJointInit" #.(chipmunk-lispify "cpRatchetJointInit" 'function)) :pointer
  (joint :pointer)
  (a :pointer)
  (b :pointer)
  (phase :double)
  (ratchet :double))

(clipmunk-defcfun ("cpRatchetJointNew" #.(chipmunk-lispify "cpRatchetJointNew" 'function)) :pointer
  (a :pointer)
  (b :pointer)
  (phase :double)
  (ratchet :double))

(clipmunk-defcfun ("cpRatchetJointGetAngle" #.(chipmunk-lispify "cpRatchetJointGetAngle" 'function)) :double
  (constraint :pointer))

(clipmunk-defcfun ("cpRatchetJointSetAngle" #.(chipmunk-lispify "cpRatchetJointSetAngle" 'function)) :void
  (constraint :pointer)
  (value :double))

(clipmunk-defcfun ("cpRatchetJointGetPhase" #.(chipmunk-lispify "cpRatchetJointGetPhase" 'function)) :double
  (constraint :pointer))

(clipmunk-defcfun ("cpRatchetJointSetPhase" #.(chipmunk-lispify "cpRatchetJointSetPhase" 'function)) :void
  (constraint :pointer)
  (value :double))

(clipmunk-defcfun ("cpRatchetJointGetRatchet" #.(chipmunk-lispify "cpRatchetJointGetRatchet" 'function)) :double
  (constraint :pointer))

(clipmunk-defcfun ("cpRatchetJointSetRatchet" #.(chipmunk-lispify "cpRatchetJointSetRatchet" 'function)) :void
  (constraint :pointer)
  (value :double))

(clipmunk-defcfun ("cpRotaryLimitJointGetClass" #.(chipmunk-lispify "cpRotaryLimitJointGetClass" 'function)) :pointer)

(clipmunk-defcstruct #.(chipmunk-lispify "cpRotaryLimitJoint" 'classname)
	(#.(chipmunk-lispify "constraint" 'slotname) #.(chipmunk-lispify "cpConstraint" 'classname))
	(#.(chipmunk-lispify "min" 'slotname) :double)
	(#.(chipmunk-lispify "max" 'slotname) :double)
	(#.(chipmunk-lispify "iSum" 'slotname) :double)
	(#.(chipmunk-lispify "bias" 'slotname) :double)
	(#.(chipmunk-lispify "jAcc" 'slotname) :double))

(clipmunk-defcfun ("cpRotaryLimitJointAlloc" #.(chipmunk-lispify "cpRotaryLimitJointAlloc" 'function)) :pointer)

(clipmunk-defcfun ("cpRotaryLimitJointInit" #.(chipmunk-lispify "cpRotaryLimitJointInit" 'function)) :pointer
  (joint :pointer)
  (a :pointer)
  (b :pointer)
  (min :double)
  (max :double))

(clipmunk-defcfun ("cpRotaryLimitJointNew" #.(chipmunk-lispify "cpRotaryLimitJointNew" 'function)) :pointer
  (a :pointer)
  (b :pointer)
  (min :double)
  (max :double))

(clipmunk-defcfun ("cpRotaryLimitJointGetMin" #.(chipmunk-lispify "cpRotaryLimitJointGetMin" 'function)) :double
  (constraint :pointer))

(clipmunk-defcfun ("cpRotaryLimitJointSetMin" #.(chipmunk-lispify "cpRotaryLimitJointSetMin" 'function)) :void
  (constraint :pointer)
  (value :double))

(clipmunk-defcfun ("cpRotaryLimitJointGetMax" #.(chipmunk-lispify "cpRotaryLimitJointGetMax" 'function)) :double
  (constraint :pointer))

(clipmunk-defcfun ("cpRotaryLimitJointSetMax" #.(chipmunk-lispify "cpRotaryLimitJointSetMax" 'function)) :void
  (constraint :pointer)
  (value :double))

(clipmunk-defcfun ("cpSimpleMotorGetClass" #.(chipmunk-lispify "cpSimpleMotorGetClass" 'function)) :pointer)

(clipmunk-defcstruct #.(chipmunk-lispify "cpSimpleMotor" 'classname)
	(#.(chipmunk-lispify "constraint" 'slotname) #.(chipmunk-lispify "cpConstraint" 'classname))
	(#.(chipmunk-lispify "rate" 'slotname) :double)
	(#.(chipmunk-lispify "iSum" 'slotname) :double)
	(#.(chipmunk-lispify "jAcc" 'slotname) :double))

(clipmunk-defcfun ("cpSimpleMotorAlloc" #.(chipmunk-lispify "cpSimpleMotorAlloc" 'function)) :pointer)

(clipmunk-defcfun ("cpSimpleMotorInit" #.(chipmunk-lispify "cpSimpleMotorInit" 'function)) :pointer
  (joint :pointer)
  (a :pointer)
  (b :pointer)
  (rate :double))

(clipmunk-defcfun ("cpSimpleMotorNew" #.(chipmunk-lispify "cpSimpleMotorNew" 'function)) :pointer
  (a :pointer)
  (b :pointer)
  (rate :double))

(clipmunk-defcfun ("cpSimpleMotorGetRate" #.(chipmunk-lispify "cpSimpleMotorGetRate" 'function)) :double
  (constraint :pointer))

(clipmunk-defcfun ("cpSimpleMotorSetRate" #.(chipmunk-lispify "cpSimpleMotorSetRate" 'function)) :void
  (constraint :pointer)
  (value :double))

(clipmunk-defcfun ("cpSlideJointGetClass" #.(chipmunk-lispify "cpSlideJointGetClass" 'function)) :pointer)

(clipmunk-defcstruct #.(chipmunk-lispify "cpSlideJoint" 'classname)
	(#.(chipmunk-lispify "constraint" 'slotname) #.(chipmunk-lispify "cpConstraint" 'classname))
	(anchr1-x :double) (anchr1-y :double)
	(anchr2-x :double) (anchr2-y :double)
	(#.(chipmunk-lispify "min" 'slotname) :double)
	(#.(chipmunk-lispify "max" 'slotname) :double)
	(r1-x :double) (r1-y :double)
	(r2-x :double) (r2-y :double)
	(n-x :double) (n-y :double)
	(#.(chipmunk-lispify "nMass" 'slotname) :double)
	(#.(chipmunk-lispify "jnAcc" 'slotname) :double)
	(#.(chipmunk-lispify "bias" 'slotname) :double))

(clipmunk-defcfun ("cpSlideJointAlloc" #.(chipmunk-lispify "cpSlideJointAlloc" 'function)) :pointer)

(clipmunk-defcfun ("cpSlideJointInit" #.(chipmunk-lispify "cpSlideJointInit" 'function)) :pointer
  (joint :pointer)
  (a :pointer)
  (b :pointer)
  (anchr1-x :double) (anchr1-y :double)
  (anchr2-x :double) (anchr2-y :double)
  (min :double)
  (max :double))

(clipmunk-defcfun ("cpSlideJointNew" #.(chipmunk-lispify "cpSlideJointNew" 'function)) :pointer
  (a :pointer)
  (b :pointer)
  (anchr1-x :double) (anchr1-y :double)
  (anchr2-x :double) (anchr2-y :double)
  (min :double)
  (max :double))

(clipmunk-defcfun ("cpSlideJointGetAnchr1" #.(chipmunk-lispify "cpSlideJointGetAnchr1" 'function)) #.(chipmunk-lispify "cpVect" 'classname)
  (constraint :pointer))

(clipmunk-defcfun ("cpSlideJointSetAnchr1" #.(chipmunk-lispify "cpSlideJointSetAnchr1" 'function)) :void
  (constraint :pointer)
  (value-x :double) (value-y :double))

(clipmunk-defcfun ("cpSlideJointGetAnchr2" #.(chipmunk-lispify "cpSlideJointGetAnchr2" 'function)) #.(chipmunk-lispify "cpVect" 'classname)
  (constraint :pointer))

(clipmunk-defcfun ("cpSlideJointSetAnchr2" #.(chipmunk-lispify "cpSlideJointSetAnchr2" 'function)) :void
  (constraint :pointer)
  (value-x :double) (value-y :double))

(clipmunk-defcfun ("cpSlideJointGetMin" #.(chipmunk-lispify "cpSlideJointGetMin" 'function)) :double
  (constraint :pointer))

(clipmunk-defcfun ("cpSlideJointSetMin" #.(chipmunk-lispify "cpSlideJointSetMin" 'function)) :void
  (constraint :pointer)
  (value :double))

(clipmunk-defcfun ("cpSlideJointGetMax" #.(chipmunk-lispify "cpSlideJointGetMax" 'function)) :double
  (constraint :pointer))

(clipmunk-defcfun ("cpSlideJointSetMax" #.(chipmunk-lispify "cpSlideJointSetMax" 'function)) :void
  (constraint :pointer)
  (value :double))

(clipmunk-defcstruct #.(chipmunk-lispify "cpSpace" 'classname)
	(#.(chipmunk-lispify "iterations" 'slotname) :int)
	(gravity-x :double) (gravity-y :double)
	(#.(chipmunk-lispify "damping" 'slotname) :double)
	(#.(chipmunk-lispify "idleSpeedThreshold" 'slotname) :double)
	(#.(chipmunk-lispify "sleepTimeThreshold" 'slotname) :double)
	(#.(chipmunk-lispify "collisionSlop" 'slotname) :double)
	(#.(chipmunk-lispify "collisionBias" 'slotname) :double)
	(#.(chipmunk-lispify "collisionPersistence" 'slotname) :unsigned-int)
	(#.(chipmunk-lispify "enableContactGraph" 'slotname) :int)
	(#.(chipmunk-lispify "data" 'slotname) :pointer)
	(#.(chipmunk-lispify "staticBody" 'slotname) :pointer)
	(#.(chipmunk-lispify "stamp" 'slotname) :unsigned-int)
	(#.(chipmunk-lispify "curr_dt" 'slotname) :double)
	(#.(chipmunk-lispify "bodies" 'slotname) :pointer)
	(#.(chipmunk-lispify "rousedBodies" 'slotname) :pointer)
	(#.(chipmunk-lispify "sleepingComponents" 'slotname) :pointer)
	(#.(chipmunk-lispify "staticShapes" 'slotname) :pointer)
	(#.(chipmunk-lispify "activeShapes" 'slotname) :pointer)
	(#.(chipmunk-lispify "arbiters" 'slotname) :pointer)
	(#.(chipmunk-lispify "contactBuffersHead" 'slotname) :pointer)
	(#.(chipmunk-lispify "cachedArbiters" 'slotname) :pointer)
	(#.(chipmunk-lispify "pooledArbiters" 'slotname) :pointer)
	(#.(chipmunk-lispify "constraints" 'slotname) :pointer)
	(#.(chipmunk-lispify "allocatedBuffers" 'slotname) :pointer)
	(#.(chipmunk-lispify "locked" 'slotname) :int)
	(#.(chipmunk-lispify "collisionHandlers" 'slotname) :pointer)
	(#.(chipmunk-lispify "defaultHandler" 'slotname) #.(chipmunk-lispify "cpCollisionHandler" 'classname))
	(#.(chipmunk-lispify "skipPostStep" 'slotname) :int)
	(#.(chipmunk-lispify "postStepCallbacks" 'slotname) :pointer)
	(#.(chipmunk-lispify "_staticBody" 'slotname) #.(chipmunk-lispify "cpBody" 'classname)))

(clipmunk-defcfun ("cpSpaceAlloc" #.(chipmunk-lispify "cpSpaceAlloc" 'function)) :pointer)

(clipmunk-defcfun ("cpSpaceInit" #.(chipmunk-lispify "cpSpaceInit" 'function)) :pointer
  (space :pointer))

(clipmunk-defcfun ("cpSpaceNew" #.(chipmunk-lispify "cpSpaceNew" 'function)) :pointer)

(clipmunk-defcfun ("cpSpaceDestroy" #.(chipmunk-lispify "cpSpaceDestroy" 'function)) :void
  (space :pointer))

(clipmunk-defcfun ("cpSpaceFree" #.(chipmunk-lispify "cpSpaceFree" 'function)) :void
  (space :pointer))

(clipmunk-defcfun ("cpSpaceGetIterations" #.(chipmunk-lispify "cpSpaceGetIterations" 'function)) :int
  (space :pointer))

(clipmunk-defcfun ("cpSpaceSetIterations" #.(chipmunk-lispify "cpSpaceSetIterations" 'function)) :void
  (space :pointer)
  (value :int))

(clipmunk-defcfun ("cpSpaceGetGravity" #.(chipmunk-lispify "cpSpaceGetGravity" 'function)) #.(chipmunk-lispify "cpVect" 'classname)
  (space :pointer))

(clipmunk-defcfun ("cpSpaceSetGravity" #.(chipmunk-lispify "cpSpaceSetGravity" 'function)) :void
  (space :pointer)
  (value-x :double) (value-y :double))

(clipmunk-defcfun ("cpSpaceGetDamping" #.(chipmunk-lispify "cpSpaceGetDamping" 'function)) :double
  (space :pointer))

(clipmunk-defcfun ("cpSpaceSetDamping" #.(chipmunk-lispify "cpSpaceSetDamping" 'function)) :void
  (space :pointer)
  (value :double))

(clipmunk-defcfun ("cpSpaceGetIdleSpeedThreshold" #.(chipmunk-lispify "cpSpaceGetIdleSpeedThreshold" 'function)) :double
  (space :pointer))

(clipmunk-defcfun ("cpSpaceSetIdleSpeedThreshold" #.(chipmunk-lispify "cpSpaceSetIdleSpeedThreshold" 'function)) :void
  (space :pointer)
  (value :double))

(clipmunk-defcfun ("cpSpaceGetSleepTimeThreshold" #.(chipmunk-lispify "cpSpaceGetSleepTimeThreshold" 'function)) :double
  (space :pointer))

(clipmunk-defcfun ("cpSpaceSetSleepTimeThreshold" #.(chipmunk-lispify "cpSpaceSetSleepTimeThreshold" 'function)) :void
  (space :pointer)
  (value :double))

(clipmunk-defcfun ("cpSpaceGetCollisionSlop" #.(chipmunk-lispify "cpSpaceGetCollisionSlop" 'function)) :double
  (space :pointer))

(clipmunk-defcfun ("cpSpaceSetCollisionSlop" #.(chipmunk-lispify "cpSpaceSetCollisionSlop" 'function)) :void
  (space :pointer)
  (value :double))

(clipmunk-defcfun ("cpSpaceGetCollisionBias" #.(chipmunk-lispify "cpSpaceGetCollisionBias" 'function)) :double
  (space :pointer))

(clipmunk-defcfun ("cpSpaceSetCollisionBias" #.(chipmunk-lispify "cpSpaceSetCollisionBias" 'function)) :void
  (space :pointer)
  (value :double))

(clipmunk-defcfun ("cpSpaceGetCollisionPersistence" #.(chipmunk-lispify "cpSpaceGetCollisionPersistence" 'function)) :unsigned-int
  (space :pointer))

(clipmunk-defcfun ("cpSpaceSetCollisionPersistence" #.(chipmunk-lispify "cpSpaceSetCollisionPersistence" 'function)) :void
  (space :pointer)
  (value :unsigned-int))

(clipmunk-defcfun ("cpSpaceGetEnableContactGraph" #.(chipmunk-lispify "cpSpaceGetEnableContactGraph" 'function)) :int
  (space :pointer))

(clipmunk-defcfun ("cpSpaceSetEnableContactGraph" #.(chipmunk-lispify "cpSpaceSetEnableContactGraph" 'function)) :void
  (space :pointer)
  (value :int))

(clipmunk-defcfun ("cpSpaceGetUserData" #.(chipmunk-lispify "cpSpaceGetUserData" 'function)) :pointer
  (space :pointer))

(clipmunk-defcfun ("cpSpaceSetUserData" #.(chipmunk-lispify "cpSpaceSetUserData" 'function)) :void
  (space :pointer)
  (value :pointer))

(clipmunk-defcfun ("cpSpaceGetStaticBody" #.(chipmunk-lispify "cpSpaceGetStaticBody" 'function)) :pointer
  (space :pointer))

(clipmunk-defcfun ("cpSpaceGetCurrentTimeStep" #.(chipmunk-lispify "cpSpaceGetCurrentTimeStep" 'function)) :double
  (space :pointer))

(clipmunk-defcfun ("cpSpaceIsLocked" #.(chipmunk-lispify "cpSpaceIsLocked" 'function)) :int
  (space :pointer))

(clipmunk-defcfun ("cpSpaceSetDefaultCollisionHandler" #.(chipmunk-lispify "cpSpaceSetDefaultCollisionHandler" 'function)) :void
  (space :pointer)
  (begin :pointer)
  (preSolve :pointer)
  (postSolve :pointer)
  (separate :pointer)
  (data :pointer))

(clipmunk-defcfun ("cpSpaceAddCollisionHandler" #.(chipmunk-lispify "cpSpaceAddCollisionHandler" 'function)) :void
  (space :pointer)
  (a :pointer)
  (b :pointer)
  (begin :pointer)
  (preSolve :pointer)
  (postSolve :pointer)
  (separate :pointer)
  (data :pointer))

(clipmunk-defcfun ("cpSpaceRemoveCollisionHandler" #.(chipmunk-lispify "cpSpaceRemoveCollisionHandler" 'function)) :void
  (space :pointer)
  (a :pointer)
  (b :pointer))

(clipmunk-defcfun ("cpSpaceAddShape" #.(chipmunk-lispify "cpSpaceAddShape" 'function)) :pointer
  (space :pointer)
  (shape :pointer))

(clipmunk-defcfun ("cpSpaceAddStaticShape" #.(chipmunk-lispify "cpSpaceAddStaticShape" 'function)) :pointer
  (space :pointer)
  (shape :pointer))

(clipmunk-defcfun ("cpSpaceAddBody" #.(chipmunk-lispify "cpSpaceAddBody" 'function)) :pointer
  (space :pointer)
  (body :pointer))

(clipmunk-defcfun ("cpSpaceAddConstraint" #.(chipmunk-lispify "cpSpaceAddConstraint" 'function)) :pointer
  (space :pointer)
  (constraint :pointer))

(clipmunk-defcfun ("cpSpaceRemoveShape" #.(chipmunk-lispify "cpSpaceRemoveShape" 'function)) :void
  (space :pointer)
  (shape :pointer))

(clipmunk-defcfun ("cpSpaceRemoveStaticShape" #.(chipmunk-lispify "cpSpaceRemoveStaticShape" 'function)) :void
  (space :pointer)
  (shape :pointer))

(clipmunk-defcfun ("cpSpaceRemoveBody" #.(chipmunk-lispify "cpSpaceRemoveBody" 'function)) :void
  (space :pointer)
  (body :pointer))

(clipmunk-defcfun ("cpSpaceRemoveConstraint" #.(chipmunk-lispify "cpSpaceRemoveConstraint" 'function)) :void
  (space :pointer)
  (constraint :pointer))

(clipmunk-defcfun ("cpSpaceContainsShape" #.(chipmunk-lispify "cpSpaceContainsShape" 'function)) :int
  (space :pointer)
  (shape :pointer))

(clipmunk-defcfun ("cpSpaceContainsBody" #.(chipmunk-lispify "cpSpaceContainsBody" 'function)) :int
  (space :pointer)
  (body :pointer))

(clipmunk-defcfun ("cpSpaceContainsConstraint" #.(chipmunk-lispify "cpSpaceContainsConstraint" 'function)) :int
  (space :pointer)
  (constraint :pointer))

(clipmunk-defcfun ("cpSpaceAddPostStepCallback" #.(chipmunk-lispify "cpSpaceAddPostStepCallback" 'function)) :int
  (space :pointer)
  (func :pointer)
  (key :pointer)
  (data :pointer))

(clipmunk-defcfun ("cpSpacePointQuery" #.(chipmunk-lispify "cpSpacePointQuery" 'function)) :void
  (space :pointer)
  (point-x :double) (point-y :double)
  (layers :unsigned-int)
  (group :pointer)
  (func :pointer)
  (data :pointer))

(clipmunk-defcfun ("cpSpacePointQueryFirst" #.(chipmunk-lispify "cpSpacePointQueryFirst" 'function)) :pointer
  (space :pointer)
  (point-x :double) (point-y :double)
  (layers :unsigned-int)
  (group :pointer))

(clipmunk-defcfun ("cpSpaceNearestPointQuery" #.(chipmunk-lispify "cpSpaceNearestPointQuery" 'function)) :void
  (space :pointer)
  (point-x :double) (point-y :double)
  (maxDistance :double)
  (layers :unsigned-int)
  (group :pointer)
  (func :pointer)
  (data :pointer))

(clipmunk-defcfun ("cpSpaceNearestPointQueryNearest" #.(chipmunk-lispify "cpSpaceNearestPointQueryNearest" 'function)) :pointer
  (space :pointer)
  (point-x :double) (point-y :double)
  (maxDistance :double)
  (layers :unsigned-int)
  (group :pointer)
  (out :pointer))

(clipmunk-defcfun ("cpSpaceSegmentQuery" #.(chipmunk-lispify "cpSpaceSegmentQuery" 'function)) :void
  (space :pointer)
  (start-x :double) (start-y :double)
  (end-x :double) (end-y :double)
  (layers :unsigned-int)
  (group :pointer)
  (func :pointer)
  (data :pointer))

(clipmunk-defcfun ("cpSpaceSegmentQueryFirst" #.(chipmunk-lispify "cpSpaceSegmentQueryFirst" 'function)) :pointer
  (space :pointer)
  (start-x :double) (start-y :double)
  (end-x :double) (end-y :double)
  (layers :unsigned-int)
  (group :pointer)
  (out :pointer))

(clipmunk-defcfun ("cpSpaceBBQuery" #.(chipmunk-lispify "cpSpaceBBQuery" 'function)) :void
  (space :pointer)
  (bb #.(chipmunk-lispify "cpBB" 'classname))
  (layers :unsigned-int)
  (group :pointer)
  (func :pointer)
  (data :pointer))

(clipmunk-defcfun ("cpSpaceShapeQuery" #.(chipmunk-lispify "cpSpaceShapeQuery" 'function)) :int
  (space :pointer)
  (shape :pointer)
  (func :pointer)
  (data :pointer))

(clipmunk-defcfun ("cpSpaceActivateShapesTouchingShape" #.(chipmunk-lispify "cpSpaceActivateShapesTouchingShape" 'function)) :void
  (space :pointer)
  (shape :pointer))

(clipmunk-defcfun ("cpSpaceEachBody" #.(chipmunk-lispify "cpSpaceEachBody" 'function)) :void
  (space :pointer)
  (func :pointer)
  (data :pointer))

(clipmunk-defcfun ("cpSpaceEachShape" #.(chipmunk-lispify "cpSpaceEachShape" 'function)) :void
  (space :pointer)
  (func :pointer)
  (data :pointer))

(clipmunk-defcfun ("cpSpaceEachConstraint" #.(chipmunk-lispify "cpSpaceEachConstraint" 'function)) :void
  (space :pointer)
  (func :pointer)
  (data :pointer))

(clipmunk-defcfun ("cpSpaceReindexStatic" #.(chipmunk-lispify "cpSpaceReindexStatic" 'function)) :void
  (space :pointer))

(clipmunk-defcfun ("cpSpaceReindexShape" #.(chipmunk-lispify "cpSpaceReindexShape" 'function)) :void
  (space :pointer)
  (shape :pointer))

(clipmunk-defcfun ("cpSpaceReindexShapesForBody" #.(chipmunk-lispify "cpSpaceReindexShapesForBody" 'function)) :void
  (space :pointer)
  (body :pointer))

(clipmunk-defcfun ("cpSpaceUseSpatialHash" #.(chipmunk-lispify "cpSpaceUseSpatialHash" 'function)) :void
  (space :pointer)
  (dim :double)
  (count :int))

(clipmunk-defcfun ("cpSpaceStep" #.(chipmunk-lispify "cpSpaceStep" 'function)) :void
  (space :pointer)
  (dt :double))

(clipmunk-defcfun ("cpSpaceAddCollisionHandler" #.(chipmunk-lispify "cpSpaceAddCollisionHandler" 'function)) :void
  (space :pointer)
  (a :int)
  (b :int)
  (begin :pointer)
  (preSolve :pointer)
  (postSolve :pointer)
  (separate :pointer)
  (data :pointer))

(clipmunk-defcfun ("cpSpaceRemoveCollisionHandler" #.(chipmunk-lispify "cpSpaceRemoveCollisionHandler" 'function)) :void
  (space :pointer)
  (a :int)
  (b :int))


