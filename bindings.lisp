;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.4
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

(in-package :clipmunk)



(cl:defconstant #.(chipmunk-lispify "CP_ALLOW_PRIVATE_ACCESS" 'constant) 0)

(cffi:defcfun ("cpMessage" #.(chipmunk-lispify "cpMessage" 'function)) :void
  (condition :string)
  (file :string)
  (line :int)
  (isError :int)
  (isHardError :int)
  (message :string)
  &rest)

(cl:defconstant #.(chipmunk-lispify "CP_BUFFER_BYTES" 'constant) (cl:* 32 1024))

(cl:defconstant #.(chipmunk-lispify "CP_VERSION_MAJOR" 'constant) 6)

(cl:defconstant #.(chipmunk-lispify "CP_VERSION_MINOR" 'constant) 1)

(cl:defconstant #.(chipmunk-lispify "CP_VERSION_RELEASE" 'constant) 1)

(cffi:defcvar ("cpVersionString" #.(chipmunk-lispify "cpVersionString" 'variable))
 :string)

(cffi:defcfun ("cpInitChipmunk" #.(chipmunk-lispify "cpInitChipmunk" 'function)) :void)

(cffi:defcfun ("cpAreaForCircle" #.(chipmunk-lispify "cpAreaForCircle" 'function)) :double
  (r1 :double)
  (r2 :double))

(cffi:defcfun ("cpAreaForSegment" #.(chipmunk-lispify "cpAreaForSegment" 'function)) :double
  (a :pointer)
  (b :pointer)
  (r :double))

(cffi:defcfun ("cpAreaForPoly" #.(chipmunk-lispify "cpAreaForPoly" 'function)) :double
  (numVerts :int)
  (verts :pointer))

(cffi:defcfun ("cpCentroidForPoly" #.(chipmunk-lispify "cpCentroidForPoly" 'function)) :pointer
  (numVerts :int)
  (verts :pointer))

(cffi:defcfun ("cpRecenterPoly" #.(chipmunk-lispify "cpRecenterPoly" 'function)) :void
  (numVerts :int)
  (verts :pointer))

(cffi:defcfun ("cpMomentForBox" #.(chipmunk-lispify "cpMomentForBox" 'function)) :double
  (m :double)
  (width :double)
  (height :double))

(cffi:defcfun ("cpMomentForBox2" #.(chipmunk-lispify "cpMomentForBox2" 'function)) :double
  (m :double)
  (box :pointer))

(cffi:defcfun ("cpConvexHull" #.(chipmunk-lispify "cpConvexHull" 'function)) :int
  (count :int)
  (verts :pointer)
  (result :pointer)
  (first :pointer)
  (tol :double))

(cl:defconstant #.(chipmunk-lispify "CP_USE_DOUBLES" 'constant) 1)

(cl:defconstant #.(chipmunk-lispify "M_PI" 'constant) 3.14159265358979323846264338327950288d0)

(cl:defconstant #.(chipmunk-lispify "M_E" 'constant) 2.71828182845904523536028747135266250d0)

(cffi:defcfun ("cpfclamp01" #.(chipmunk-lispify "cpfclamp01" 'function)) :double
  (f :double))

(cl:defconstant #.(chipmunk-lispify "cpTrue" 'constant) 1)

(cl:defconstant #.(chipmunk-lispify "cpFalse" 'constant) 0)

(cffi:defcstruct #.(chipmunk-lispify "cpVect" 'classname)
	(#.(chipmunk-lispify "x" 'slotname) :double)
	(#.(chipmunk-lispify "y" 'slotname) :double))

(cffi:defcfun ("cpvlength" #.(chipmunk-lispify "cpvlength" 'function)) :double
  (v-x :double) (v-y :double))

(cffi:defcfun ("cpvtoangle" #.(chipmunk-lispify "cpvtoangle" 'function)) :double
  (v-x :double) (v-y :double))

(cffi:defcfun ("cpvstr" #.(chipmunk-lispify "cpvstr" 'function)) :string
  (v-x :double) (v-y :double))

(cffi:defcstruct #.(chipmunk-lispify "cpBB" 'classname)
	(#.(chipmunk-lispify "l" 'slotname) :double)
	(#.(chipmunk-lispify "b" 'slotname) :double)
	(#.(chipmunk-lispify "r" 'slotname) :double)
	(#.(chipmunk-lispify "t" 'slotname) :double))

(cffi:defcfun ("cpBBNewForCircle" #.(chipmunk-lispify "cpBBNewForCircle" 'function)) #.(chipmunk-lispify "cpBB" 'classname)
  (p-x :double) (p-y :double)
  (r :double))

(cffi:defcfun ("cpBBIntersects" #.(chipmunk-lispify "cpBBIntersects" 'function)) :int
  (a #.(chipmunk-lispify "cpBB" 'classname))
  (b #.(chipmunk-lispify "cpBB" 'classname)))

(cffi:defcfun ("cpBBContainsBB" #.(chipmunk-lispify "cpBBContainsBB" 'function)) :int
  (bb #.(chipmunk-lispify "cpBB" 'classname))
  (other #.(chipmunk-lispify "cpBB" 'classname)))

(cffi:defcfun ("cpBBContainsVect" #.(chipmunk-lispify "cpBBContainsVect" 'function)) :int
  (bb #.(chipmunk-lispify "cpBB" 'classname))
  (v-x :double) (v-y :double))

(cffi:defcfun ("cpBBMerge" #.(chipmunk-lispify "cpBBMerge" 'function)) #.(chipmunk-lispify "cpBB" 'classname)
  (a #.(chipmunk-lispify "cpBB" 'classname))
  (b #.(chipmunk-lispify "cpBB" 'classname)))

(cffi:defcfun ("cpBBExpand" #.(chipmunk-lispify "cpBBExpand" 'function)) #.(chipmunk-lispify "cpBB" 'classname)
  (bb #.(chipmunk-lispify "cpBB" 'classname))
  (v-x :double) (v-y :double))

(cffi:defcfun ("cpBBArea" #.(chipmunk-lispify "cpBBArea" 'function)) :double
  (bb #.(chipmunk-lispify "cpBB" 'classname)))

(cffi:defcfun ("cpBBMergedArea" #.(chipmunk-lispify "cpBBMergedArea" 'function)) :double
  (a #.(chipmunk-lispify "cpBB" 'classname))
  (b #.(chipmunk-lispify "cpBB" 'classname)))

(cffi:defcfun ("cpBBSegmentQuery" #.(chipmunk-lispify "cpBBSegmentQuery" 'function)) :double
  (bb #.(chipmunk-lispify "cpBB" 'classname))
  (a-x :double) (a-y :double)
  (b-x :double) (b-y :double))

(cffi:defcfun ("cpBBIntersectsSegment" #.(chipmunk-lispify "cpBBIntersectsSegment" 'function)) :int
  (bb #.(chipmunk-lispify "cpBB" 'classname))
  (a-x :double) (a-y :double)
  (b-x :double) (b-y :double))

(cffi:defcstruct #.(chipmunk-lispify "cpComponentNode" 'classname)
	(#.(chipmunk-lispify "root" 'slotname) :pointer)
	(#.(chipmunk-lispify "next" 'slotname) :pointer)
	(#.(chipmunk-lispify "idleTime" 'slotname) :double))

(cffi:defcstruct #.(chipmunk-lispify "cpBody" 'classname)
	(#.(chipmunk-lispify "velocity_func" 'slotname) :pointer)
	(#.(chipmunk-lispify "position_func" 'slotname) :pointer)
	(#.(chipmunk-lispify "m" 'slotname) :double)
	(#.(chipmunk-lispify "m_inv" 'slotname) :double)
	(#.(chipmunk-lispify "i" 'slotname) :double)
	(#.(chipmunk-lispify "i_inv" 'slotname) :double)
	(p-x :double) (p-y :double)
	(v-x :double) (v-y :double)
	(f-x :double) (f-y :double)
	(#.(chipmunk-lispify "a" 'slotname) :double)
	(#.(chipmunk-lispify "w" 'slotname) :double)
	(#.(chipmunk-lispify "t" 'slotname) :double)
	(rot-x :double) (rot-y :double)
	(#.(chipmunk-lispify "data" 'slotname) :pointer)
	(#.(chipmunk-lispify "v_limit" 'slotname) :double)
	(#.(chipmunk-lispify "w_limit" 'slotname) :double)
	(v_bias_private-x :double) (v_bias_private-y :double)
	(#.(chipmunk-lispify "w_bias_private" 'slotname) :double)
	(#.(chipmunk-lispify "space_private" 'slotname) :pointer)
	(#.(chipmunk-lispify "shapeList_private" 'slotname) :pointer)
	(#.(chipmunk-lispify "arbiterList_private" 'slotname) :pointer)
	(#.(chipmunk-lispify "constraintList_private" 'slotname) :pointer)
	(#.(chipmunk-lispify "node_private" 'slotname) #.(chipmunk-lispify "cpComponentNode" 'classname)))

(cffi:defcfun ("cpBodyAlloc" #.(chipmunk-lispify "cpBodyAlloc" 'function)) :pointer)

(cffi:defcfun ("cpBodyInit" #.(chipmunk-lispify "cpBodyInit" 'function)) :pointer
  (body :pointer)
  (m :double)
  (i :double))

(cffi:defcfun ("cpBodyNew" #.(chipmunk-lispify "cpBodyNew" 'function)) :pointer
  (m :double)
  (i :double))

(cffi:defcfun ("cpBodyInitStatic" #.(chipmunk-lispify "cpBodyInitStatic" 'function)) :pointer
  (body :pointer))

(cffi:defcfun ("cpBodyNewStatic" #.(chipmunk-lispify "cpBodyNewStatic" 'function)) :pointer)

(cffi:defcfun ("cpBodyDestroy" #.(chipmunk-lispify "cpBodyDestroy" 'function)) :void
  (body :pointer))

(cffi:defcfun ("cpBodyFree" #.(chipmunk-lispify "cpBodyFree" 'function)) :void
  (body :pointer))

(cffi:defcfun ("cpBodySanityCheck" #.(chipmunk-lispify "cpBodySanityCheck" 'function)) :void
  (body :pointer))

(cffi:defcfun ("cpBodyActivate" #.(chipmunk-lispify "cpBodyActivate" 'function)) :void
  (body :pointer))

(cffi:defcfun ("cpBodyActivateStatic" #.(chipmunk-lispify "cpBodyActivateStatic" 'function)) :void
  (body :pointer)
  (filter :pointer))

(cffi:defcfun ("cpBodySleep" #.(chipmunk-lispify "cpBodySleep" 'function)) :void
  (body :pointer))

(cffi:defcfun ("cpBodySleepWithGroup" #.(chipmunk-lispify "cpBodySleepWithGroup" 'function)) :void
  (body :pointer)
  (group :pointer))

(cffi:defcfun ("cpBodyIsStatic" #.(chipmunk-lispify "cpBodyIsStatic" 'function)) :int
  (body :pointer))

(cffi:defcfun ("cpBodyGetSpace" #.(chipmunk-lispify "cpBodyGetSpace" 'function)) :pointer
  (body :pointer))

(cffi:defcfun ("cpBodyGetMass" #.(chipmunk-lispify "cpBodyGetMass" 'function)) :double
  (body :pointer))

(cffi:defcfun ("cpBodySetMass" #.(chipmunk-lispify "cpBodySetMass" 'function)) :void
  (body :pointer)
  (m :double))

(cffi:defcfun ("cpBodyGetMoment" #.(chipmunk-lispify "cpBodyGetMoment" 'function)) :double
  (body :pointer))

(cffi:defcfun ("cpBodySetMoment" #.(chipmunk-lispify "cpBodySetMoment" 'function)) :void
  (body :pointer)
  (i :double))

(cffi:defcfun ("cpBodySetPos" #.(chipmunk-lispify "cpBodySetPos" 'function)) :void
  (body :pointer)
  (pos-x :double) (pos-y :double))

(cffi:defcfun ("cpBodySetVel" #.(chipmunk-lispify "cpBodySetVel" 'function)) :void
  (body :pointer)
  (value-x :double) (value-y :double))

(cffi:defcfun ("cpBodySetForce" #.(chipmunk-lispify "cpBodySetForce" 'function)) :void
  (body :pointer)
  (value-x :double) (value-y :double))

(cffi:defcfun ("cpBodyGetAngle" #.(chipmunk-lispify "cpBodyGetAngle" 'function)) :double
  (body :pointer))

(cffi:defcfun ("cpBodySetAngle" #.(chipmunk-lispify "cpBodySetAngle" 'function)) :void
  (body :pointer)
  (a :double))

(cffi:defcfun ("cpBodyGetAngVel" #.(chipmunk-lispify "cpBodyGetAngVel" 'function)) :double
  (body :pointer))

(cffi:defcfun ("cpBodySetAngVel" #.(chipmunk-lispify "cpBodySetAngVel" 'function)) :void
  (body :pointer)
  (value :double))

(cffi:defcfun ("cpBodyGetTorque" #.(chipmunk-lispify "cpBodyGetTorque" 'function)) :double
  (body :pointer))

(cffi:defcfun ("cpBodySetTorque" #.(chipmunk-lispify "cpBodySetTorque" 'function)) :void
  (body :pointer)
  (value :double))

(cffi:defcfun ("cpBodyGetVelLimit" #.(chipmunk-lispify "cpBodyGetVelLimit" 'function)) :double
  (body :pointer))

(cffi:defcfun ("cpBodySetVelLimit" #.(chipmunk-lispify "cpBodySetVelLimit" 'function)) :void
  (body :pointer)
  (value :double))

(cffi:defcfun ("cpBodyGetAngVelLimit" #.(chipmunk-lispify "cpBodyGetAngVelLimit" 'function)) :double
  (body :pointer))

(cffi:defcfun ("cpBodySetAngVelLimit" #.(chipmunk-lispify "cpBodySetAngVelLimit" 'function)) :void
  (body :pointer)
  (value :double))

(cffi:defcfun ("cpBodyGetUserData" #.(chipmunk-lispify "cpBodyGetUserData" 'function)) :pointer
  (body :pointer))

(cffi:defcfun ("cpBodySetUserData" #.(chipmunk-lispify "cpBodySetUserData" 'function)) :void
  (body :pointer)
  (value :pointer))

(cffi:defcfun ("cpBodyUpdateVelocity" #.(chipmunk-lispify "cpBodyUpdateVelocity" 'function)) :void
  (body :pointer)
  (gravity-x :double) (gravity-y :double)
  (damping :double)
  (dt :double))

(cffi:defcfun ("cpBodyUpdatePosition" #.(chipmunk-lispify "cpBodyUpdatePosition" 'function)) :void
  (body :pointer)
  (dt :double))

(cffi:defcfun ("cpBodyResetForces" #.(chipmunk-lispify "cpBodyResetForces" 'function)) :void
  (body :pointer))

(cffi:defcfun ("cpBodyApplyForce" #.(chipmunk-lispify "cpBodyApplyForce" 'function)) :void
  (body :pointer)
  (f-x :double) (f-y :double)
  (r-x :double) (r-y :double))

(cffi:defcfun ("cpBodyGetVelAtWorldPoint" #.(chipmunk-lispify "cpBodyGetVelAtWorldPoint" 'function)) #.(chipmunk-lispify "cpVect" 'classname)
  (body :pointer)
  (point-x :double) (point-y :double))

(cffi:defcfun ("cpBodyGetVelAtLocalPoint" #.(chipmunk-lispify "cpBodyGetVelAtLocalPoint" 'function)) #.(chipmunk-lispify "cpVect" 'classname)
  (body :pointer)
  (point-x :double) (point-y :double))

(cffi:defcfun ("cpBodyEachShape" #.(chipmunk-lispify "cpBodyEachShape" 'function)) :void
  (body :pointer)
  (func :pointer)
  (data :pointer))

(cffi:defcfun ("cpBodyEachConstraint" #.(chipmunk-lispify "cpBodyEachConstraint" 'function)) :void
  (body :pointer)
  (func :pointer)
  (data :pointer))

(cffi:defcfun ("cpBodyEachArbiter" #.(chipmunk-lispify "cpBodyEachArbiter" 'function)) :void
  (body :pointer)
  (func :pointer)
  (data :pointer))

(cffi:defcstruct #.(chipmunk-lispify "cpNearestPointQueryInfo" 'classname)
	(#.(chipmunk-lispify "shape" 'slotname) :pointer)
	(p-x :double) (p-y :double)
	(#.(chipmunk-lispify "d" 'slotname) :double))

(cffi:defcstruct #.(chipmunk-lispify "cpSegmentQueryInfo" 'classname)
	(#.(chipmunk-lispify "shape" 'slotname) :pointer)
	(#.(chipmunk-lispify "t" 'slotname) :double)
	(n-x :double) (n-y :double))

(cffi:defcenum #.(chipmunk-lispify "cpShapeType" 'enumname)
	#.(chipmunk-lispify "CP_CIRCLE_SHAPE" 'enumvalue :keyword)
	#.(chipmunk-lispify "CP_SEGMENT_SHAPE" 'enumvalue :keyword)
	#.(chipmunk-lispify "CP_POLY_SHAPE" 'enumvalue :keyword)
	#.(chipmunk-lispify "CP_NUM_SHAPES" 'enumvalue :keyword))

(cffi:defcstruct #.(chipmunk-lispify "cpShapeClass" 'classname)
	(#.(chipmunk-lispify "type" 'slotname) #.(chipmunk-lispify "cpShapeType" 'enumname))
	(#.(chipmunk-lispify "cacheData" 'slotname) :pointer)
	(#.(chipmunk-lispify "destroy" 'slotname) :pointer)
	(#.(chipmunk-lispify "nearestPointQuery" 'slotname) :pointer)
	(#.(chipmunk-lispify "segmentQuery" 'slotname) :pointer))

(cffi:defcstruct #.(chipmunk-lispify "cpShape" 'classname)
	(#.(chipmunk-lispify "klass_private" 'slotname) :pointer)
	(#.(chipmunk-lispify "body" 'slotname) :pointer)
	(#.(chipmunk-lispify "bb" 'slotname) #.(chipmunk-lispify "cpBB" 'classname))
	(#.(chipmunk-lispify "sensor" 'slotname) :int)
	(#.(chipmunk-lispify "e" 'slotname) :double)
	(#.(chipmunk-lispify "u" 'slotname) :double)
	(surface_v-x :double) (surface_v-y :double)
	(#.(chipmunk-lispify "data" 'slotname) :pointer)
	(#.(chipmunk-lispify "collision_type" 'slotname) :pointer)
	(#.(chipmunk-lispify "group" 'slotname) :pointer)
	(#.(chipmunk-lispify "layers" 'slotname) :unsigned-int)
	(#.(chipmunk-lispify "space_private" 'slotname) :pointer)
	(#.(chipmunk-lispify "next_private" 'slotname) :pointer)
	(#.(chipmunk-lispify "prev_private" 'slotname) :pointer)
	(#.(chipmunk-lispify "hashid_private" 'slotname) :pointer))

(cffi:defcfun ("cpShapeDestroy" #.(chipmunk-lispify "cpShapeDestroy" 'function)) :void
  (shape :pointer))

(cffi:defcfun ("cpShapeFree" #.(chipmunk-lispify "cpShapeFree" 'function)) :void
  (shape :pointer))

(cffi:defcfun ("cpShapeCacheBB" #.(chipmunk-lispify "cpShapeCacheBB" 'function)) #.(chipmunk-lispify "cpBB" 'classname)
  (shape :pointer))

(cffi:defcfun ("cpShapeUpdate" #.(chipmunk-lispify "cpShapeUpdate" 'function)) #.(chipmunk-lispify "cpBB" 'classname)
  (shape :pointer)
  (pos-x :double) (pos-y :double)
  (rot-x :double) (rot-y :double))

(cffi:defcfun ("cpShapePointQuery" #.(chipmunk-lispify "cpShapePointQuery" 'function)) :int
  (shape :pointer)
  (p-x :double) (p-y :double))

(cffi:defcfun ("cpShapeNearestPointQuery" #.(chipmunk-lispify "cpShapeNearestPointQuery" 'function)) :double
  (shape :pointer)
  (p-x :double) (p-y :double)
  (out :pointer))

(cffi:defcfun ("cpShapeSegmentQuery" #.(chipmunk-lispify "cpShapeSegmentQuery" 'function)) :int
  (shape :pointer)
  (a-x :double) (a-y :double)
  (b-x :double) (b-y :double)
  (info :pointer))

(cffi:defcfun ("cpShapeGetSpace" #.(chipmunk-lispify "cpShapeGetSpace" 'function)) :pointer
  (shape :pointer))

(cffi:defcfun ("cpShapeGetBody" #.(chipmunk-lispify "cpShapeGetBody" 'function)) :pointer
  (shape :pointer))

(cffi:defcfun ("cpShapeSetBody" #.(chipmunk-lispify "cpShapeSetBody" 'function)) :void
  (shape :pointer)
  (body :pointer))

(cffi:defcfun ("cpShapeGetBB" #.(chipmunk-lispify "cpShapeGetBB" 'function)) #.(chipmunk-lispify "cpBB" 'classname)
  (shape :pointer))

(cffi:defcfun ("cpShapeGetSensor" #.(chipmunk-lispify "cpShapeGetSensor" 'function)) :int
  (shape :pointer))

(cffi:defcfun ("cpShapeSetSensor" #.(chipmunk-lispify "cpShapeSetSensor" 'function)) :void
  (shape :pointer)
  (value :int))

(cffi:defcfun ("cpShapeGetElasticity" #.(chipmunk-lispify "cpShapeGetElasticity" 'function)) :double
  (shape :pointer))

(cffi:defcfun ("cpShapeSetElasticity" #.(chipmunk-lispify "cpShapeSetElasticity" 'function)) :void
  (shape :pointer)
  (value :double))

(cffi:defcfun ("cpShapeGetFriction" #.(chipmunk-lispify "cpShapeGetFriction" 'function)) :double
  (shape :pointer))

(cffi:defcfun ("cpShapeSetFriction" #.(chipmunk-lispify "cpShapeSetFriction" 'function)) :void
  (shape :pointer)
  (value :double))

(cffi:defcfun ("cpShapeGetSurfaceVelocity" #.(chipmunk-lispify "cpShapeGetSurfaceVelocity" 'function)) #.(chipmunk-lispify "cpVect" 'classname)
  (shape :pointer))

(cffi:defcfun ("cpShapeSetSurfaceVelocity" #.(chipmunk-lispify "cpShapeSetSurfaceVelocity" 'function)) :void
  (shape :pointer)
  (value-x :double) (value-y :double))

(cffi:defcfun ("cpShapeGetUserData" #.(chipmunk-lispify "cpShapeGetUserData" 'function)) :pointer
  (shape :pointer))

(cffi:defcfun ("cpShapeSetUserData" #.(chipmunk-lispify "cpShapeSetUserData" 'function)) :void
  (shape :pointer)
  (value :pointer))

(cffi:defcfun ("cpShapeGetCollisionType" #.(chipmunk-lispify "cpShapeGetCollisionType" 'function)) :pointer
  (shape :pointer))

(cffi:defcfun ("cpShapeSetCollisionType" #.(chipmunk-lispify "cpShapeSetCollisionType" 'function)) :void
  (shape :pointer)
  (value :pointer))

(cffi:defcfun ("cpShapeGetGroup" #.(chipmunk-lispify "cpShapeGetGroup" 'function)) :pointer
  (shape :pointer))

(cffi:defcfun ("cpShapeSetGroup" #.(chipmunk-lispify "cpShapeSetGroup" 'function)) :void
  (shape :pointer)
  (value :pointer))

(cffi:defcfun ("cpShapeGetLayers" #.(chipmunk-lispify "cpShapeGetLayers" 'function)) :unsigned-int
  (shape :pointer))

(cffi:defcfun ("cpShapeSetLayers" #.(chipmunk-lispify "cpShapeSetLayers" 'function)) :void
  (shape :pointer)
  (value :unsigned-int))

(cffi:defcfun ("cpResetShapeIdCounter" #.(chipmunk-lispify "cpResetShapeIdCounter" 'function)) :void)

(cffi:defcstruct #.(chipmunk-lispify "cpCircleShape" 'classname)
	(#.(chipmunk-lispify "shape" 'slotname) #.(chipmunk-lispify "cpShape" 'classname))
	(c-x :double) (c-y :double)
	(tc-x :double) (tc-y :double)
	(#.(chipmunk-lispify "r" 'slotname) :double))

(cffi:defcfun ("cpCircleShapeAlloc" #.(chipmunk-lispify "cpCircleShapeAlloc" 'function)) :pointer)

(cffi:defcfun ("cpCircleShapeInit" #.(chipmunk-lispify "cpCircleShapeInit" 'function)) :pointer
  (circle :pointer)
  (body :pointer)
  (radius :double)
  (offset-x :double) (offset-y :double))

(cffi:defcfun ("cpCircleShapeNew" #.(chipmunk-lispify "cpCircleShapeNew" 'function)) :pointer
  (body :pointer)
  (radius :double)
  (offset-x :double) (offset-y :double))

(cffi:defcfun ("cpCircleShapeGetRadius" #.(chipmunk-lispify "cpCircleShapeGetRadius" 'function)) :double
  (shape :pointer))

(cffi:defcstruct #.(chipmunk-lispify "cpSegmentShape" 'classname)
	(#.(chipmunk-lispify "shape" 'slotname) #.(chipmunk-lispify "cpShape" 'classname))
	(a-x :double) (a-y :double)
	(b-x :double) (b-y :double)
	(n-x :double) (n-y :double)
	(ta-x :double) (ta-y :double)
	(tb-x :double) (tb-y :double)
	(tn-x :double) (tn-y :double)
	(#.(chipmunk-lispify "r" 'slotname) :double)
	(a_tangent-x :double) (a_tangent-y :double)
	(b_tangent-x :double) (b_tangent-y :double))

(cffi:defcfun ("cpSegmentShapeAlloc" #.(chipmunk-lispify "cpSegmentShapeAlloc" 'function)) :pointer)

(cffi:defcfun ("cpSegmentShapeInit" #.(chipmunk-lispify "cpSegmentShapeInit" 'function)) :pointer
  (seg :pointer)
  (body :pointer)
  (a-x :double) (a-y :double)
  (b-x :double) (b-y :double)
  (radius :double))

(cffi:defcfun ("cpSegmentShapeNew" #.(chipmunk-lispify "cpSegmentShapeNew" 'function)) :pointer
  (body :pointer)
  (a-x :double) (a-y :double)
  (b-x :double) (b-y :double)
  (radius :double))

(cffi:defcfun ("cpSegmentShapeSetNeighbors" #.(chipmunk-lispify "cpSegmentShapeSetNeighbors" 'function)) :void
  (shape :pointer)
  (prev-x :double) (prev-y :double)
  (next-x :double) (next-y :double))

(cffi:defcfun ("cpSegmentShapeGetRadius" #.(chipmunk-lispify "cpSegmentShapeGetRadius" 'function)) :double
  (shape :pointer))

(cffi:defcstruct #.(chipmunk-lispify "cpSplittingPlane" 'classname)
	(n-x :double) (n-y :double)
	(#.(chipmunk-lispify "d" 'slotname) :double))

(cffi:defcstruct #.(chipmunk-lispify "cpPolyShape" 'classname)
	(#.(chipmunk-lispify "shape" 'slotname) #.(chipmunk-lispify "cpShape" 'classname))
	(#.(chipmunk-lispify "numVerts" 'slotname) :int)
	(#.(chipmunk-lispify "verts" 'slotname) :pointer)
	(#.(chipmunk-lispify "tVerts" 'slotname) :pointer)
	(#.(chipmunk-lispify "planes" 'slotname) :pointer)
	(#.(chipmunk-lispify "tPlanes" 'slotname) :pointer))

(cffi:defcfun ("cpPolyShapeAlloc" #.(chipmunk-lispify "cpPolyShapeAlloc" 'function)) :pointer)

(cffi:defcfun ("cpPolyShapeInit" #.(chipmunk-lispify "cpPolyShapeInit" 'function)) :pointer
  (poly :pointer)
  (body :pointer)
  (numVerts :int)
  (verts :pointer)
  (offset-x :double) (offset-y :double))

(cffi:defcfun ("cpPolyShapeNew" #.(chipmunk-lispify "cpPolyShapeNew" 'function)) :pointer
  (body :pointer)
  (numVerts :int)
  (verts :pointer)
  (offset-x :double) (offset-y :double))

(cffi:defcfun ("cpBoxShapeInit" #.(chipmunk-lispify "cpBoxShapeInit" 'function)) :pointer
  (poly :pointer)
  (body :pointer)
  (width :double)
  (height :double))

(cffi:defcfun ("cpBoxShapeInit2" #.(chipmunk-lispify "cpBoxShapeInit2" 'function)) :pointer
  (poly :pointer)
  (body :pointer)
  (box #.(chipmunk-lispify "cpBB" 'classname)))

(cffi:defcfun ("cpBoxShapeNew" #.(chipmunk-lispify "cpBoxShapeNew" 'function)) :pointer
  (body :pointer)
  (width :double)
  (height :double))

(cffi:defcfun ("cpBoxShapeNew2" #.(chipmunk-lispify "cpBoxShapeNew2" 'function)) :pointer
  (body :pointer)
  (box #.(chipmunk-lispify "cpBB" 'classname)))

(cffi:defcfun ("cpPolyValidate" #.(chipmunk-lispify "cpPolyValidate" 'function)) :int
  (verts :pointer)
  (numVerts :int))

(cffi:defcfun ("cpPolyShapeGetNumVerts" #.(chipmunk-lispify "cpPolyShapeGetNumVerts" 'function)) :int
  (shape :pointer))

(cffi:defcstruct #.(chipmunk-lispify "cpCollisionHandler" 'classname)
	(#.(chipmunk-lispify "a" 'slotname) :pointer)
	(#.(chipmunk-lispify "b" 'slotname) :pointer)
	(#.(chipmunk-lispify "begin" 'slotname) :pointer)
	(#.(chipmunk-lispify "preSolve" 'slotname) :pointer)
	(#.(chipmunk-lispify "postSolve" 'slotname) :pointer)
	(#.(chipmunk-lispify "separate" 'slotname) :pointer)
	(#.(chipmunk-lispify "data" 'slotname) :pointer))

(cl:defconstant #.(chipmunk-lispify "CP_MAX_CONTACTS_PER_ARBITER" 'constant) 4)

(cffi:defcenum #.(chipmunk-lispify "cpArbiterState" 'enumname)
	#.(chipmunk-lispify "cpArbiterStateFirstColl" 'enumvalue :keyword)
	#.(chipmunk-lispify "cpArbiterStateNormal" 'enumvalue :keyword)
	#.(chipmunk-lispify "cpArbiterStateIgnore" 'enumvalue :keyword)
	#.(chipmunk-lispify "cpArbiterStateCached" 'enumvalue :keyword))

(cffi:defcstruct #.(chipmunk-lispify "cpArbiterThread" 'classname)
	(#.(chipmunk-lispify "next" 'slotname) :pointer)
	(#.(chipmunk-lispify "prev" 'slotname) :pointer))

(cffi:defcstruct #.(chipmunk-lispify "cpArbiter" 'classname)
	(#.(chipmunk-lispify "e" 'slotname) :double)
	(#.(chipmunk-lispify "u" 'slotname) :double)
	(surface_vr-x :double) (surface_vr-y :double)
	(#.(chipmunk-lispify "a_private" 'slotname) :pointer)
	(#.(chipmunk-lispify "b_private" 'slotname) :pointer)
	(#.(chipmunk-lispify "body_a_private" 'slotname) :pointer)
	(#.(chipmunk-lispify "body_b_private" 'slotname) :pointer)
	(#.(chipmunk-lispify "thread_a_private" 'slotname) #.(chipmunk-lispify "cpArbiterThread" 'classname))
	(#.(chipmunk-lispify "thread_b_private" 'slotname) #.(chipmunk-lispify "cpArbiterThread" 'classname))
	(#.(chipmunk-lispify "numContacts_private" 'slotname) :int)
	(#.(chipmunk-lispify "contacts_private" 'slotname) :pointer)
	(#.(chipmunk-lispify "stamp_private" 'slotname) :unsigned-int)
	(#.(chipmunk-lispify "handler_private" 'slotname) :pointer)
	(#.(chipmunk-lispify "swappedColl_private" 'slotname) :int)
	(#.(chipmunk-lispify "state_private" 'slotname) #.(chipmunk-lispify "cpArbiterState" 'enumname)))

(cffi:defcfun ("cpArbiterGetElasticity" #.(chipmunk-lispify "cpArbiterGetElasticity" 'function)) :double
  (arb :pointer))

(cffi:defcfun ("cpArbiterSetElasticity" #.(chipmunk-lispify "cpArbiterSetElasticity" 'function)) :void
  (arb :pointer)
  (value :double))

(cffi:defcfun ("cpArbiterGetFriction" #.(chipmunk-lispify "cpArbiterGetFriction" 'function)) :double
  (arb :pointer))

(cffi:defcfun ("cpArbiterSetFriction" #.(chipmunk-lispify "cpArbiterSetFriction" 'function)) :void
  (arb :pointer)
  (value :double))

(cffi:defcfun ("cpArbiterGetSurfaceVelocity" #.(chipmunk-lispify "cpArbiterGetSurfaceVelocity" 'function)) #.(chipmunk-lispify "cpVect" 'classname)
  (arb :pointer))

(cffi:defcfun ("cpArbiterSetSurfaceVelocity" #.(chipmunk-lispify "cpArbiterSetSurfaceVelocity" 'function)) :void
  (arb :pointer)
  (value-x :double) (value-y :double))

(cffi:defcfun ("cpArbiterTotalKE" #.(chipmunk-lispify "cpArbiterTotalKE" 'function)) :double
  (arb :pointer))

(cffi:defcfun ("cpArbiterIgnore" #.(chipmunk-lispify "cpArbiterIgnore" 'function)) :void
  (arb :pointer))

(cffi:defcstruct #.(chipmunk-lispify "cpContactPointSet" 'classname)
	(#.(chipmunk-lispify "count" 'slotname) :int)
	(#.(chipmunk-lispify "points" 'slotname) :pointer))

(cffi:defcstruct #.(chipmunk-lispify "cpContactPointSet_points" 'classname)
	(point-x :double) (point-y :double)
	(normal-x :double) (normal-y :double)
	(#.(chipmunk-lispify "dist" 'slotname) :double))

(cffi:defcfun ("cpArbiterGetContactPointSet" #.(chipmunk-lispify "cpArbiterGetContactPointSet" 'function)) #.(chipmunk-lispify "cpContactPointSet" 'classname)
  (arb :pointer))

(cffi:defcfun ("cpArbiterGetCount" #.(chipmunk-lispify "cpArbiterGetCount" 'function)) :int
  (arb :pointer))

(cffi:defcfun ("cpArbiterGetDepth" #.(chipmunk-lispify "cpArbiterGetDepth" 'function)) :double
  (arb :pointer)
  (i :int))

(cffi:defcstruct #.(chipmunk-lispify "cpConstraintClass" 'classname)
	(#.(chipmunk-lispify "preStep" 'slotname) :pointer)
	(#.(chipmunk-lispify "applyCachedImpulse" 'slotname) :pointer)
	(#.(chipmunk-lispify "applyImpulse" 'slotname) :pointer)
	(#.(chipmunk-lispify "getImpulse" 'slotname) :pointer))

(cffi:defcstruct #.(chipmunk-lispify "cpConstraint" 'classname)
	(#.(chipmunk-lispify "klass_private" 'slotname) :pointer)
	(#.(chipmunk-lispify "a" 'slotname) :pointer)
	(#.(chipmunk-lispify "b" 'slotname) :pointer)
	(#.(chipmunk-lispify "space_private" 'slotname) :pointer)
	(#.(chipmunk-lispify "next_a_private" 'slotname) :pointer)
	(#.(chipmunk-lispify "next_b_private" 'slotname) :pointer)
	(#.(chipmunk-lispify "maxForce" 'slotname) :double)
	(#.(chipmunk-lispify "errorBias" 'slotname) :double)
	(#.(chipmunk-lispify "maxBias" 'slotname) :double)
	(#.(chipmunk-lispify "preSolve" 'slotname) :pointer)
	(#.(chipmunk-lispify "postSolve" 'slotname) :pointer)
	(#.(chipmunk-lispify "data" 'slotname) :pointer))

(cffi:defcfun ("cpConstraintDestroy" #.(chipmunk-lispify "cpConstraintDestroy" 'function)) :void
  (constraint :pointer))

(cffi:defcfun ("cpConstraintFree" #.(chipmunk-lispify "cpConstraintFree" 'function)) :void
  (constraint :pointer))

(cffi:defcfun ("cpConstraintActivateBodies" #.(chipmunk-lispify "cpConstraintActivateBodies" 'function)) :void
  (constraint :pointer))

(cffi:defcfun ("cpConstraintGetSpace" #.(chipmunk-lispify "cpConstraintGetSpace" 'function)) :pointer
  (constraint :pointer))

(cffi:defcfun ("cpConstraintGetA" #.(chipmunk-lispify "cpConstraintGetA" 'function)) :pointer
  (constraint :pointer))

(cffi:defcfun ("cpConstraintGetB" #.(chipmunk-lispify "cpConstraintGetB" 'function)) :pointer
  (constraint :pointer))

(cffi:defcfun ("cpConstraintGetMaxForce" #.(chipmunk-lispify "cpConstraintGetMaxForce" 'function)) :double
  (constraint :pointer))

(cffi:defcfun ("cpConstraintSetMaxForce" #.(chipmunk-lispify "cpConstraintSetMaxForce" 'function)) :void
  (constraint :pointer)
  (value :double))

(cffi:defcfun ("cpConstraintGetErrorBias" #.(chipmunk-lispify "cpConstraintGetErrorBias" 'function)) :double
  (constraint :pointer))

(cffi:defcfun ("cpConstraintSetErrorBias" #.(chipmunk-lispify "cpConstraintSetErrorBias" 'function)) :void
  (constraint :pointer)
  (value :double))

(cffi:defcfun ("cpConstraintGetMaxBias" #.(chipmunk-lispify "cpConstraintGetMaxBias" 'function)) :double
  (constraint :pointer))

(cffi:defcfun ("cpConstraintSetMaxBias" #.(chipmunk-lispify "cpConstraintSetMaxBias" 'function)) :void
  (constraint :pointer)
  (value :double))

(cffi:defcfun ("cpConstraintGetPreSolveFunc" #.(chipmunk-lispify "cpConstraintGetPreSolveFunc" 'function)) :pointer
  (constraint :pointer))

(cffi:defcfun ("cpConstraintSetPreSolveFunc" #.(chipmunk-lispify "cpConstraintSetPreSolveFunc" 'function)) :void
  (constraint :pointer)
  (value :pointer))

(cffi:defcfun ("cpConstraintGetPostSolveFunc" #.(chipmunk-lispify "cpConstraintGetPostSolveFunc" 'function)) :pointer
  (constraint :pointer))

(cffi:defcfun ("cpConstraintSetPostSolveFunc" #.(chipmunk-lispify "cpConstraintSetPostSolveFunc" 'function)) :void
  (constraint :pointer)
  (value :pointer))

(cffi:defcfun ("cpConstraintGetUserData" #.(chipmunk-lispify "cpConstraintGetUserData" 'function)) :pointer
  (constraint :pointer))

(cffi:defcfun ("cpConstraintSetUserData" #.(chipmunk-lispify "cpConstraintSetUserData" 'function)) :void
  (constraint :pointer)
  (value :pointer))

(cffi:defcfun ("cpConstraintGetImpulse" #.(chipmunk-lispify "cpConstraintGetImpulse" 'function)) :double
  (constraint :pointer))

(cffi:defcstruct #.(chipmunk-lispify "cpSpace" 'classname)
	(#.(chipmunk-lispify "iterations" 'slotname) :int)
	(gravity-x :double) (gravity-y :double)
	(#.(chipmunk-lispify "damping" 'slotname) :double)
	(#.(chipmunk-lispify "idleSpeedThreshold" 'slotname) :double)
	(#.(chipmunk-lispify "sleepTimeThreshold" 'slotname) :double)
	(#.(chipmunk-lispify "collisionSlop" 'slotname) :double)
	(#.(chipmunk-lispify "collisionBias" 'slotname) :double)
	(#.(chipmunk-lispify "collisionPersistence" 'slotname) :unsigned-int)
	(#.(chipmunk-lispify "enableContactGraph" 'slotname) :int)
	(#.(chipmunk-lispify "data" 'slotname) :pointer)
	(#.(chipmunk-lispify "staticBody" 'slotname) :pointer)
	(#.(chipmunk-lispify "stamp_private" 'slotname) :unsigned-int)
	(#.(chipmunk-lispify "curr_dt_private" 'slotname) :double)
	(#.(chipmunk-lispify "bodies_private" 'slotname) :pointer)
	(#.(chipmunk-lispify "rousedBodies_private" 'slotname) :pointer)
	(#.(chipmunk-lispify "sleepingComponents_private" 'slotname) :pointer)
	(#.(chipmunk-lispify "staticShapes_private" 'slotname) :pointer)
	(#.(chipmunk-lispify "activeShapes_private" 'slotname) :pointer)
	(#.(chipmunk-lispify "arbiters_private" 'slotname) :pointer)
	(#.(chipmunk-lispify "contactBuffersHead_private" 'slotname) :pointer)
	(#.(chipmunk-lispify "cachedArbiters_private" 'slotname) :pointer)
	(#.(chipmunk-lispify "pooledArbiters_private" 'slotname) :pointer)
	(#.(chipmunk-lispify "constraints_private" 'slotname) :pointer)
	(#.(chipmunk-lispify "allocatedBuffers_private" 'slotname) :pointer)
	(#.(chipmunk-lispify "locked_private" 'slotname) :int)
	(#.(chipmunk-lispify "collisionHandlers_private" 'slotname) :pointer)
	(#.(chipmunk-lispify "defaultHandler_private" 'slotname) #.(chipmunk-lispify "cpCollisionHandler" 'classname))
	(#.(chipmunk-lispify "skipPostStep_private" 'slotname) :int)
	(#.(chipmunk-lispify "postStepCallbacks_private" 'slotname) :pointer)
	(#.(chipmunk-lispify "_staticBody_private" 'slotname) #.(chipmunk-lispify "cpBody" 'classname)))

(cffi:defcfun ("cpSpaceAlloc" #.(chipmunk-lispify "cpSpaceAlloc" 'function)) :pointer)

(cffi:defcfun ("cpSpaceInit" #.(chipmunk-lispify "cpSpaceInit" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("cpSpaceNew" #.(chipmunk-lispify "cpSpaceNew" 'function)) :pointer)

(cffi:defcfun ("cpSpaceDestroy" #.(chipmunk-lispify "cpSpaceDestroy" 'function)) :void
  (space :pointer))

(cffi:defcfun ("cpSpaceFree" #.(chipmunk-lispify "cpSpaceFree" 'function)) :void
  (space :pointer))

(cffi:defcfun ("cpSpaceGetIterations" #.(chipmunk-lispify "cpSpaceGetIterations" 'function)) :int
  (space :pointer))

(cffi:defcfun ("cpSpaceSetIterations" #.(chipmunk-lispify "cpSpaceSetIterations" 'function)) :void
  (space :pointer)
  (value :int))

(cffi:defcfun ("cpSpaceGetGravity" #.(chipmunk-lispify "cpSpaceGetGravity" 'function)) #.(chipmunk-lispify "cpVect" 'classname)
  (space :pointer))

(cffi:defcfun ("cpSpaceSetGravity" #.(chipmunk-lispify "cpSpaceSetGravity" 'function)) :void
  (space :pointer)
  (value-x :double) (value-y :double))

(cffi:defcfun ("cpSpaceGetDamping" #.(chipmunk-lispify "cpSpaceGetDamping" 'function)) :double
  (space :pointer))

(cffi:defcfun ("cpSpaceSetDamping" #.(chipmunk-lispify "cpSpaceSetDamping" 'function)) :void
  (space :pointer)
  (value :double))

(cffi:defcfun ("cpSpaceGetIdleSpeedThreshold" #.(chipmunk-lispify "cpSpaceGetIdleSpeedThreshold" 'function)) :double
  (space :pointer))

(cffi:defcfun ("cpSpaceSetIdleSpeedThreshold" #.(chipmunk-lispify "cpSpaceSetIdleSpeedThreshold" 'function)) :void
  (space :pointer)
  (value :double))

(cffi:defcfun ("cpSpaceGetSleepTimeThreshold" #.(chipmunk-lispify "cpSpaceGetSleepTimeThreshold" 'function)) :double
  (space :pointer))

(cffi:defcfun ("cpSpaceSetSleepTimeThreshold" #.(chipmunk-lispify "cpSpaceSetSleepTimeThreshold" 'function)) :void
  (space :pointer)
  (value :double))

(cffi:defcfun ("cpSpaceGetCollisionSlop" #.(chipmunk-lispify "cpSpaceGetCollisionSlop" 'function)) :double
  (space :pointer))

(cffi:defcfun ("cpSpaceSetCollisionSlop" #.(chipmunk-lispify "cpSpaceSetCollisionSlop" 'function)) :void
  (space :pointer)
  (value :double))

(cffi:defcfun ("cpSpaceGetCollisionBias" #.(chipmunk-lispify "cpSpaceGetCollisionBias" 'function)) :double
  (space :pointer))

(cffi:defcfun ("cpSpaceSetCollisionBias" #.(chipmunk-lispify "cpSpaceSetCollisionBias" 'function)) :void
  (space :pointer)
  (value :double))

(cffi:defcfun ("cpSpaceGetCollisionPersistence" #.(chipmunk-lispify "cpSpaceGetCollisionPersistence" 'function)) :unsigned-int
  (space :pointer))

(cffi:defcfun ("cpSpaceSetCollisionPersistence" #.(chipmunk-lispify "cpSpaceSetCollisionPersistence" 'function)) :void
  (space :pointer)
  (value :unsigned-int))

(cffi:defcfun ("cpSpaceGetEnableContactGraph" #.(chipmunk-lispify "cpSpaceGetEnableContactGraph" 'function)) :int
  (space :pointer))

(cffi:defcfun ("cpSpaceSetEnableContactGraph" #.(chipmunk-lispify "cpSpaceSetEnableContactGraph" 'function)) :void
  (space :pointer)
  (value :int))

(cffi:defcfun ("cpSpaceGetUserData" #.(chipmunk-lispify "cpSpaceGetUserData" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("cpSpaceSetUserData" #.(chipmunk-lispify "cpSpaceSetUserData" 'function)) :void
  (space :pointer)
  (value :pointer))

(cffi:defcfun ("cpSpaceGetStaticBody" #.(chipmunk-lispify "cpSpaceGetStaticBody" 'function)) :pointer
  (space :pointer))

(cffi:defcfun ("cpSpaceGetCurrentTimeStep" #.(chipmunk-lispify "cpSpaceGetCurrentTimeStep" 'function)) :double
  (space :pointer))

(cffi:defcfun ("cpSpaceIsLocked" #.(chipmunk-lispify "cpSpaceIsLocked" 'function)) :int
  (space :pointer))

(cffi:defcfun ("cpSpaceSetDefaultCollisionHandler" #.(chipmunk-lispify "cpSpaceSetDefaultCollisionHandler" 'function)) :void
  (space :pointer)
  (begin :pointer)
  (preSolve :pointer)
  (postSolve :pointer)
  (separate :pointer)
  (data :pointer))

(cffi:defcfun ("cpSpaceAddCollisionHandler" #.(chipmunk-lispify "cpSpaceAddCollisionHandler" 'function)) :void
  (space :pointer)
  (a :pointer)
  (b :pointer)
  (begin :pointer)
  (preSolve :pointer)
  (postSolve :pointer)
  (separate :pointer)
  (data :pointer))

(cffi:defcfun ("cpSpaceRemoveCollisionHandler" #.(chipmunk-lispify "cpSpaceRemoveCollisionHandler" 'function)) :void
  (space :pointer)
  (a :pointer)
  (b :pointer))

(cffi:defcfun ("cpSpaceAddShape" #.(chipmunk-lispify "cpSpaceAddShape" 'function)) :pointer
  (space :pointer)
  (shape :pointer))

(cffi:defcfun ("cpSpaceAddStaticShape" #.(chipmunk-lispify "cpSpaceAddStaticShape" 'function)) :pointer
  (space :pointer)
  (shape :pointer))

(cffi:defcfun ("cpSpaceAddBody" #.(chipmunk-lispify "cpSpaceAddBody" 'function)) :pointer
  (space :pointer)
  (body :pointer))

(cffi:defcfun ("cpSpaceAddConstraint" #.(chipmunk-lispify "cpSpaceAddConstraint" 'function)) :pointer
  (space :pointer)
  (constraint :pointer))

(cffi:defcfun ("cpSpaceRemoveShape" #.(chipmunk-lispify "cpSpaceRemoveShape" 'function)) :void
  (space :pointer)
  (shape :pointer))

(cffi:defcfun ("cpSpaceRemoveStaticShape" #.(chipmunk-lispify "cpSpaceRemoveStaticShape" 'function)) :void
  (space :pointer)
  (shape :pointer))

(cffi:defcfun ("cpSpaceRemoveBody" #.(chipmunk-lispify "cpSpaceRemoveBody" 'function)) :void
  (space :pointer)
  (body :pointer))

(cffi:defcfun ("cpSpaceRemoveConstraint" #.(chipmunk-lispify "cpSpaceRemoveConstraint" 'function)) :void
  (space :pointer)
  (constraint :pointer))

(cffi:defcfun ("cpSpaceContainsShape" #.(chipmunk-lispify "cpSpaceContainsShape" 'function)) :int
  (space :pointer)
  (shape :pointer))

(cffi:defcfun ("cpSpaceContainsBody" #.(chipmunk-lispify "cpSpaceContainsBody" 'function)) :int
  (space :pointer)
  (body :pointer))

(cffi:defcfun ("cpSpaceContainsConstraint" #.(chipmunk-lispify "cpSpaceContainsConstraint" 'function)) :int
  (space :pointer)
  (constraint :pointer))

(cffi:defcfun ("cpSpaceAddPostStepCallback" #.(chipmunk-lispify "cpSpaceAddPostStepCallback" 'function)) :void
  (space :pointer)
  (func :pointer)
  (key :pointer)
  (data :pointer))

(cffi:defcfun ("cpSpacePointQuery" #.(chipmunk-lispify "cpSpacePointQuery" 'function)) :void
  (space :pointer)
  (point-x :double) (point-y :double)
  (layers :unsigned-int)
  (group :pointer)
  (func :pointer)
  (data :pointer))

(cffi:defcfun ("cpSpacePointQueryFirst" #.(chipmunk-lispify "cpSpacePointQueryFirst" 'function)) :pointer
  (space :pointer)
  (point-x :double) (point-y :double)
  (layers :unsigned-int)
  (group :pointer))

(cffi:defcfun ("cpSpaceNearestPointQuery" #.(chipmunk-lispify "cpSpaceNearestPointQuery" 'function)) :void
  (space :pointer)
  (point-x :double) (point-y :double)
  (maxDistance :double)
  (layers :unsigned-int)
  (group :pointer)
  (func :pointer)
  (data :pointer))

(cffi:defcfun ("cpSpaceNearestPointQueryNearest" #.(chipmunk-lispify "cpSpaceNearestPointQueryNearest" 'function)) :pointer
  (space :pointer)
  (point-x :double) (point-y :double)
  (maxDistance :double)
  (layers :unsigned-int)
  (group :pointer)
  (out :pointer))

(cffi:defcfun ("cpSpaceSegmentQuery" #.(chipmunk-lispify "cpSpaceSegmentQuery" 'function)) :void
  (space :pointer)
  (start-x :double) (start-y :double)
  (end-x :double) (end-y :double)
  (layers :unsigned-int)
  (group :pointer)
  (func :pointer)
  (data :pointer))

(cffi:defcfun ("cpSpaceSegmentQueryFirst" #.(chipmunk-lispify "cpSpaceSegmentQueryFirst" 'function)) :pointer
  (space :pointer)
  (start-x :double) (start-y :double)
  (end-x :double) (end-y :double)
  (layers :unsigned-int)
  (group :pointer)
  (out :pointer))

(cffi:defcfun ("cpSpaceBBQuery" #.(chipmunk-lispify "cpSpaceBBQuery" 'function)) :void
  (space :pointer)
  (bb #.(chipmunk-lispify "cpBB" 'classname))
  (layers :unsigned-int)
  (group :pointer)
  (func :pointer)
  (data :pointer))

(cffi:defcfun ("cpSpaceShapeQuery" #.(chipmunk-lispify "cpSpaceShapeQuery" 'function)) :int
  (space :pointer)
  (shape :pointer)
  (func :pointer)
  (data :pointer))

(cffi:defcfun ("cpSpaceActivateShapesTouchingShape" #.(chipmunk-lispify "cpSpaceActivateShapesTouchingShape" 'function)) :void
  (space :pointer)
  (shape :pointer))

(cffi:defcfun ("cpSpaceEachBody" #.(chipmunk-lispify "cpSpaceEachBody" 'function)) :void
  (space :pointer)
  (func :pointer)
  (data :pointer))

(cffi:defcfun ("cpSpaceEachShape" #.(chipmunk-lispify "cpSpaceEachShape" 'function)) :void
  (space :pointer)
  (func :pointer)
  (data :pointer))

(cffi:defcfun ("cpSpaceEachConstraint" #.(chipmunk-lispify "cpSpaceEachConstraint" 'function)) :void
  (space :pointer)
  (func :pointer)
  (data :pointer))

(cffi:defcfun ("cpSpaceReindexStatic" #.(chipmunk-lispify "cpSpaceReindexStatic" 'function)) :void
  (space :pointer))

(cffi:defcfun ("cpSpaceReindexShape" #.(chipmunk-lispify "cpSpaceReindexShape" 'function)) :void
  (space :pointer)
  (shape :pointer))

(cffi:defcfun ("cpSpaceReindexShapesForBody" #.(chipmunk-lispify "cpSpaceReindexShapesForBody" 'function)) :void
  (space :pointer)
  (body :pointer))

(cffi:defcfun ("cpSpaceUseSpatialHash" #.(chipmunk-lispify "cpSpaceUseSpatialHash" 'function)) :void
  (space :pointer)
  (dim :double)
  (count :int))

(cffi:defcfun ("cpSpaceStep" #.(chipmunk-lispify "cpSpaceStep" 'function)) :void
  (space :pointer)
  (dt :double))


